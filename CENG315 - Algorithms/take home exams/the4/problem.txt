You decided to start a new life on a deserted island with your friend Isabelle. Your goal is to fill the island with buildings that have predetermined plot dimensions. For this, you need to divide the land into rectangular plots with the given dimensions, leaving the least possible m^2 of unusable land. 

Isabelle tells you the dimensions of the island. She also tells you the dimensions of the rectangular plots that you can divide the land into. Any piece of land (the whole island or the already divided plots of the land) can be divided either horizontally or vertically into two rectangular plots with integer dimensions, dividing completely through that land. This is the only way to divide the land, and divided plots cannot be joined together. Since the buildings to be placed in these plots cannot be rotated, the dimensions of the plots also cannot be rotated. You can create zero or more plots with each given dimension. A piece of land is unusable if it is not of any of the desired dimensions after all dividing operations are completed. 

Problem

In this exam, you are asked to calculate the most efficient way of dividing the land given the dimensions of the land X and Y, and the dimensions of the plots in a 2D array of booleans, then return the m^2 of unusable land by completing the divide_land() function defined below. 


int divide_land(int X, int Y, bool** possible_plots);

 



X, Y: dimensions X x Y of the total rectangular land of the island
possible_plots: a 2D array of booleans, where each value stands for the existence of a possible plot with the indices of the array cell as dimensions (for example, if possible_plot[2][3] == true, then 2 x 3 is a possible plot dimension that can be used)
to return: m^2 of unusable land, meaning the land that does not belong to any plot after all the dividing operations.

Constraints and Hints:

X and Y are integers <= 600
possible_plots is a 2D array with dimensions (X+1)x(Y+1). So, the maximum dimensions are 601x601. At any given time, there will be at most 200 "true" cells in the 2D array - but the complexity of the optimal solution does not depend on this value.
You are expected to use a dynamic programming approach to reduce complexity.
Evaluation:

After your exam, black-box evaluation will be carried out. You will get full points if you return the m^2 of unusable land correctly for the cases that will be tested, and do not exceed the memory & time limits. 
Example IO:
1)
Land Dimensions: X = 9, Y = 12
Possible Plots:
Plot 1: (1, 12) => possible_plot[1][12] = true;
Plot 2: (2, 6) => possible_plot[2][6] = true;
Plot 3: (3, 4) => possible_plot[3][4] = true;
Plot 4: (4, 3) => possible_plot[4][3] = true;
Plot 5: (6, 2) => possible_plot[6][2] = true;

m^2 of unused land: 0


2)
Land Dimensions: X = 11, Y = 7
Possible Plots:
Plot 1: (4, 5) => possible_plot[4][5] = true;
Plot 2: (6, 7) => possible_plot[6][7] = true;

m^2 of unused land: 15

I/O 2

A visualized division for the second input, where the grey areas show unused land.

Step by step, the division goes as follows:

Step 0: the whole land is undivided and unused
s0 
Step 1: The land is divided vertically, and the plot on the left with dimensions 6x7 is used, the rest of the land is unused.
 s1
Step 2: The unused land is divided horizontally, but since none of the pieces have the available plot dimensions, they are both unused.
s2 
Step 3: The plot with 5x5 dimensions is divided vertically to create two plots with dimensions 4x5 and 1x5. Since 4x5 is an available plot, it is marked as used where as plot with dimensions 1x5 is left unused.

I/O 2

3) 
Land Dimensions: X = 10, Y = 6
Possible Plots:
Plot 1: (2, 2) => possible_plot[2][2] = true;
Plot 2: (2, 6) => possible_plot[2][6] = true;
Plot 3: (4, 4) => possible_plot[4][4] = true;

Following is an INVALID PLOT DIVISION example:

invalid

Even though the plot sizes are valid, the layout is impossible to reach when the land is divided completely each time.


Specifications:

There is 1 task to be solved in 36 hours in this take-home exam.
You will implement your solutions in the4.cpp file.
You are free to add other functions to the4.cpp
Do not change the first line of the4.cpp, which is #include "the4.h"
Some libraries are included in "the4.h" for your convenience, you can use them freely.
Do not change the arguments and the return value of the function divide_land() in the file the4.cpp
Do not include any other library or write include anywhere in your the4.cpp file (not even in comments).
You are given test.cpp file to test your work on ODTUClass or your locale. You can, and you are, encouraged to modify this file to add different test cases.
If you want to test your work and see your outputs you can compile your work on your locale as:
>g++ test.cpp the4.cpp -Wall -std=c++11 -o test

> ./test


You can test your the4.cpp on the virtual lab environment. If you click run, your function will be compiled and executed with test.cpp. If you click evaluate, you will get feedback for your current work and your work will be temporarily graded for a limited number of inputs.
The grade you see in lab is not your final grade, your code will be reevaluated with different inputs after the exam.
The system has the following limits: 

a maximum execution time of 16 seconds (your program needs to return in less than two seconds per test case on average)
a 1 GB maximum memory limit,
an execution file size of 4M.
Solutions with longer running times will not be graded.
If you are sure that your solution works in the expected complexity, but your evaluation fails due to limits in the lab environment, the constant factors may be the problem.