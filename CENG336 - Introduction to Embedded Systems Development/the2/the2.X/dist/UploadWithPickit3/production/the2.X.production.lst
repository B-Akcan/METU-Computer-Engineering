

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sat Apr 20 18:17:34 2024

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    36  0000                     
    37                           ; Version 2.20
    38                           ; Generated 12/02/2020 GMT
    39                           ; 
    40                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F8722 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataBANK0
    73  000D44                     __pidataBANK0:
    74                           	callstack 0
    75                           
    76                           ;initializer for _blink_on
    77  000D44  01                 	db	1
    78  0000                     _PORTGbits	set	3974
    79  0000                     _PORTJ	set	3976
    80  0000                     _PORTH	set	3975
    81  0000                     _LATF	set	3982
    82  0000                     _PORTF	set	3973
    83  0000                     _LATE	set	3981
    84  0000                     _PORTE	set	3972
    85  0000                     _LATD	set	3980
    86  0000                     _PORTD	set	3971
    87  0000                     _LATC	set	3979
    88  0000                     _PORTC	set	3970
    89  0000                     _LATB	set	3978
    90  0000                     _PORTB	set	3969
    91  0000                     _LATG	set	3983
    92  0000                     _PORTG	set	3974
    93  0000                     _TRISJ	set	3994
    94  0000                     _TRISH	set	3993
    95  0000                     _TRISF	set	3991
    96  0000                     _TRISE	set	3990
    97  0000                     _TRISD	set	3989
    98  0000                     _TRISC	set	3988
    99  0000                     _TRISB	set	3987
   100  0000                     _TRISG	set	3992
   101  0000                     _T0CON	set	4053
   102  0000                     _PORTBbits	set	3969
   103  0000                     _TMR0H	set	4055
   104  0000                     _TMR0L	set	4054
   105  0000                     _INTCONbits	set	4082
   106  0000                     _INTCON	set	4082
   107                           
   108                           ; #config settings
   109                           
   110                           	psect	cinit
   111  000C2C                     __pcinit:
   112                           	callstack 0
   113  000C2C                     start_initialization:
   114                           	callstack 0
   115  000C2C                     __initialization:
   116                           	callstack 0
   117                           
   118                           ; Initialize objects allocated to BANK0 (1 bytes)
   119                           ; load TBLPTR registers with __pidataBANK0
   120  000C2C  0E44               	movlw	low __pidataBANK0
   121  000C2E  6EF6               	movwf	tblptrl,c
   122  000C30  0E0D               	movlw	high __pidataBANK0
   123  000C32  6EF7               	movwf	tblptrh,c
   124  000C34  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   125  000C36  6EF8               	movwf	tblptru,c
   126  000C38  0009               	tblrd		*+	;fetch initializer
   127  000C3A  CFF5 F0D8          	movff	tablat,__pdataBANK0
   128                           
   129                           ; Clear objects allocated to BANK0 (67 bytes)
   130  000C3E  EE00  F060         	lfsr	0,__pbssBANK0
   131  000C42  0E43               	movlw	67
   132  000C44                     clear_0:
   133  000C44  6AEE               	clrf	postinc0,c
   134  000C46  06E8               	decf	wreg,f,c
   135  000C48  E1FD               	bnz	clear_0
   136                           
   137                           ; Clear objects allocated to COMRAM (35 bytes)
   138  000C4A  EE00  F001         	lfsr	0,__pbssCOMRAM
   139  000C4E  0E23               	movlw	35
   140  000C50                     clear_1:
   141  000C50  6AEE               	clrf	postinc0,c
   142  000C52  06E8               	decf	wreg,f,c
   143  000C54  E1FD               	bnz	clear_1
   144  000C56                     end_of_initialization:
   145                           	callstack 0
   146  000C56                     __end_of__initialization:
   147                           	callstack 0
   148  000C56  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   149  000C58  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   150  000C5A  0100               	movlb	0
   151  000C5C  EF95  F006         	goto	_main	;jump to C main() function
   152                           
   153                           	psect	bssCOMRAM
   154  000001                     __pbssCOMRAM:
   155                           	callstack 0
   156  000001                     _keys:
   157                           	callstack 0
   158  000001                     	ds	6
   159  000007                     _PORTG_current:
   160                           	callstack 0
   161  000007                     	ds	4
   162  00000B                     _PORTG_previous:
   163                           	callstack 0
   164  00000B                     	ds	4
   165  00000F                     move_down@F4758:
   166                           	callstack 0
   167  00000F                     	ds	2
   168  000011                     move_up@F4755:
   169                           	callstack 0
   170  000011                     	ds	2
   171  000013                     move_right@F4752:
   172                           	callstack 0
   173  000013                     	ds	2
   174  000015                     move_left@F4749:
   175                           	callstack 0
   176  000015                     	ds	2
   177  000017                     submit@F4721:
   178                           	callstack 0
   179  000017                     	ds	2
   180  000019                     init@F4607:
   181                           	callstack 0
   182  000019                     	ds	2
   183  00001B                     _position:
   184                           	callstack 0
   185  00001B                     	ds	2
   186  00001D                     _blink_counter:
   187                           	callstack 0
   188  00001D                     	ds	2
   189  00001F                     _prev_rotate:
   190                           	callstack 0
   191  00001F                     	ds	1
   192  000020                     _prev_submit:
   193                           	callstack 0
   194  000020                     	ds	1
   195  000021                     _type:
   196                           	callstack 0
   197  000021                     	ds	1
   198  000022                     _rotation:
   199                           	callstack 0
   200  000022                     	ds	1
   201  000023                     _counter250ms:
   202                           	callstack 0
   203  000023                     	ds	1
   204                           
   205                           	psect	bssBANK0
   206  000060                     __pbssBANK0:
   207                           	callstack 0
   208  000060                     _grid:
   209                           	callstack 0
   210  000060                     	ds	32
   211  000080                     draw@F4685:
   212                           	callstack 0
   213  000080                     	ds	2
   214  000082                     draw@F4683:
   215                           	callstack 0
   216  000082                     	ds	2
   217  000084                     draw@F4681:
   218                           	callstack 0
   219  000084                     	ds	2
   220  000086                     draw@F4679:
   221                           	callstack 0
   222  000086                     	ds	2
   223  000088                     draw@F4677:
   224                           	callstack 0
   225  000088                     	ds	2
   226  00008A                     draw@F4675:
   227                           	callstack 0
   228  00008A                     	ds	2
   229  00008C                     draw@F4673:
   230                           	callstack 0
   231  00008C                     	ds	2
   232  00008E                     draw@F4671:
   233                           	callstack 0
   234  00008E                     	ds	2
   235  000090                     draw@F4669:
   236                           	callstack 0
   237  000090                     	ds	2
   238  000092                     draw@F4667:
   239                           	callstack 0
   240  000092                     	ds	2
   241  000094                     draw@F4665:
   242                           	callstack 0
   243  000094                     	ds	2
   244  000096                     draw@F4663:
   245                           	callstack 0
   246  000096                     	ds	2
   247  000098                     draw@F4661:
   248                           	callstack 0
   249  000098                     	ds	2
   250  00009A                     draw@F4659:
   251                           	callstack 0
   252  00009A                     	ds	2
   253  00009C                     draw@F4657:
   254                           	callstack 0
   255  00009C                     	ds	2
   256  00009E                     draw@F4655:
   257                           	callstack 0
   258  00009E                     	ds	2
   259  0000A0                     draw@F4653:
   260                           	callstack 0
   261  0000A0                     	ds	2
   262  0000A2                     _will_down:
   263                           	callstack 0
   264  0000A2                     	ds	1
   265                           
   266                           	psect	dataBANK0
   267  0000D8                     __pdataBANK0:
   268                           	callstack 0
   269  0000D8                     _blink_on:
   270                           	callstack 0
   271  0000D8                     	ds	1
   272                           
   273                           	psect	cstackBANK0
   274  0000A3                     __pcstackBANK0:
   275                           	callstack 0
   276  0000A3                     ??_setLed:
   277  0000A3                     ??_canMove:
   278  0000A3                     init@4608:
   279                           	callstack 0
   280  0000A3                     busy_wait@i:
   281                           	callstack 0
   282                           
   283                           ; 4 bytes @ 0x0
   284  0000A3                     	ds	2
   285  0000A5                     canMove@left:
   286                           	callstack 0
   287  0000A5                     init@i:
   288                           	callstack 0
   289                           
   290                           ; 2 bytes @ 0x2
   291  0000A5                     	ds	1
   292  0000A6                     canMove@right:
   293                           	callstack 0
   294                           
   295                           ; 1 bytes @ 0x3
   296  0000A6                     	ds	1
   297  0000A7                     canMove@top:
   298                           	callstack 0
   299  0000A7                     init@j:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x4
   303  0000A7                     	ds	1
   304  0000A8                     canMove@bot:
   305                           	callstack 0
   306                           
   307                           ; 1 bytes @ 0x5
   308  0000A8                     	ds	1
   309  0000A9                     _canMove$479:
   310                           	callstack 0
   311  0000A9                     init@i_333:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0x6
   315  0000A9                     	ds	1
   316  0000AA                     move@newPosition:
   317                           	callstack 0
   318                           
   319                           ; 2 bytes @ 0x7
   320  0000AA                     	ds	2
   321  0000AC                     move_left@newPosition:
   322                           	callstack 0
   323  0000AC                     move_right@newPosition:
   324                           	callstack 0
   325  0000AC                     move_up@newPosition:
   326                           	callstack 0
   327  0000AC                     move_down@newPosition:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x9
   331  0000AC                     	ds	2
   332  0000AE                     ??_draw:
   333                           
   334                           ; 1 bytes @ 0xB
   335  0000AE                     	ds	8
   336  0000B6                     draw@4654:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x13
   340  0000B6                     	ds	2
   341  0000B8                     draw@4656:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x15
   345  0000B8                     	ds	2
   346  0000BA                     draw@4658:
   347                           	callstack 0
   348                           
   349                           ; 2 bytes @ 0x17
   350  0000BA                     	ds	2
   351  0000BC                     draw@4660:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0x19
   355  0000BC                     	ds	2
   356  0000BE                     draw@4662:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0x1B
   360  0000BE                     	ds	2
   361  0000C0                     draw@4664:
   362                           	callstack 0
   363                           
   364                           ; 2 bytes @ 0x1D
   365  0000C0                     	ds	2
   366  0000C2                     draw@4666:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0x1F
   370  0000C2                     	ds	2
   371  0000C4                     draw@4668:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0x21
   375  0000C4                     	ds	2
   376  0000C6                     draw@4670:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0x23
   380  0000C6                     	ds	2
   381  0000C8                     draw@4672:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x25
   385  0000C8                     	ds	2
   386  0000CA                     draw@4674:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x27
   390  0000CA                     	ds	2
   391  0000CC                     draw@4676:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x29
   395  0000CC                     	ds	2
   396  0000CE                     draw@4678:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x2B
   400  0000CE                     	ds	2
   401  0000D0                     draw@4680:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x2D
   405  0000D0                     	ds	2
   406  0000D2                     draw@4682:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x2F
   410  0000D2                     	ds	2
   411  0000D4                     draw@4684:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x31
   415  0000D4                     	ds	2
   416  0000D6                     draw@4686:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x33
   420  0000D6                     	ds	2
   421                           
   422                           	psect	cstackCOMRAM
   423  000024                     __pcstackCOMRAM:
   424                           	callstack 0
   425  000024                     ??_not_intersects:
   426  000024                     ?___lwmod:
   427                           	callstack 0
   428  000024                     ___lwmod@dividend:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x0
   432  000024                     	ds	2
   433  000026                     _not_intersects$336:
   434                           	callstack 0
   435  000026                     ___lwmod@divisor:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x2
   439  000026                     	ds	1
   440  000027                     _not_intersects$337:
   441                           	callstack 0
   442                           
   443                           ; 1 bytes @ 0x3
   444  000027                     	ds	1
   445  000028                     _not_intersects$338:
   446                           	callstack 0
   447  000028                     ___lwmod@counter:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x4
   451  000028                     	ds	1
   452  000029                     _not_intersects$339:
   453                           	callstack 0
   454                           
   455                           ; 1 bytes @ 0x5
   456  000029                     	ds	1
   457  00002A                     _not_intersects$340:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0x6
   461  00002A                     	ds	1
   462  00002B                     _not_intersects$341:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0x7
   466  00002B                     	ds	1
   467  00002C                     _not_intersects$342:
   468                           	callstack 0
   469                           
   470                           ; 1 bytes @ 0x8
   471  00002C                     	ds	1
   472  00002D                     _not_intersects$343:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0x9
   476  00002D                     	ds	1
   477  00002E                     _not_intersects$344:
   478                           	callstack 0
   479                           
   480                           ; 1 bytes @ 0xA
   481  00002E                     	ds	1
   482  00002F                     _not_intersects$345:
   483                           	callstack 0
   484                           
   485                           ; 1 bytes @ 0xB
   486  00002F                     	ds	1
   487  000030                     _not_intersects$346:
   488                           	callstack 0
   489                           
   490                           ; 1 bytes @ 0xC
   491  000030                     	ds	1
   492  000031                     _not_intersects$347:
   493                           	callstack 0
   494                           
   495                           ; 1 bytes @ 0xD
   496  000031                     	ds	1
   497  000032                     _not_intersects$348:
   498                           	callstack 0
   499                           
   500                           ; 1 bytes @ 0xE
   501  000032                     	ds	1
   502  000033                     _not_intersects$349:
   503                           	callstack 0
   504                           
   505                           ; 1 bytes @ 0xF
   506  000033                     	ds	1
   507  000034                     _not_intersects$350:
   508                           	callstack 0
   509                           
   510                           ; 1 bytes @ 0x10
   511  000034                     	ds	1
   512  000035                     _not_intersects$351:
   513                           	callstack 0
   514                           
   515                           ; 1 bytes @ 0x11
   516  000035                     	ds	1
   517  000036                     _not_intersects$352:
   518                           	callstack 0
   519                           
   520                           ; 1 bytes @ 0x12
   521  000036                     	ds	1
   522  000037                     not_intersects@intersects:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0x13
   526  000037                     	ds	1
   527  000038                     ??_submit:
   528                           
   529                           ; 1 bytes @ 0x14
   530  000038                     	ds	2
   531  00003A                     submit@4722:
   532                           	callstack 0
   533                           
   534                           ; 2 bytes @ 0x16
   535  00003A                     	ds	2
   536  00003C                     ??_HandleInterrupt:
   537                           
   538                           ; 1 bytes @ 0x18
   539  00003C                     	ds	4
   540  000040                     setLed@pos:
   541                           	callstack 0
   542  000040                     canMove@position:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x1C
   546  000040                     	ds	2
   547  000042                     setLed@value:
   548                           	callstack 0
   549  000042                     poll_g@i:
   550                           	callstack 0
   551                           
   552                           ; 1 bytes @ 0x1E
   553  000042                     	ds	1
   554  000043                     
   555                           ; 1 bytes @ 0x1F
   556 ;;
   557 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   558 ;;
   559 ;; *************** function _main *****************
   560 ;; Defined at:
   561 ;;		line 533 in file "main.c"
   562 ;; Parameters:    Size  Location     Type
   563 ;;		None
   564 ;; Auto vars:     Size  Location     Type
   565 ;;		None
   566 ;; Return value:  Size  Location     Type
   567 ;;                  1    wreg      void 
   568 ;; Registers used:
   569 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   570 ;; Tracked objects:
   571 ;;		On entry : 0/0
   572 ;;		On exit  : 3F/0
   573 ;;		Unchanged: 0/0
   574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   579 ;;Total ram usage:        0 bytes
   580 ;; Hardware stack levels required when called:    7
   581 ;; This function calls:
   582 ;;		_busy_wait
   583 ;;		_draw
   584 ;;		_init
   585 ;;		_poll_g
   586 ;; This function is called by:
   587 ;;		Startup code after reset
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           	psect	text0
   592  000D2A                     __ptext0:
   593                           	callstack 0
   594  000D2A                     _main:
   595                           	callstack 24
   596                           
   597                           ;main.c: 534:     init();
   598                           
   599                           ;incstack = 0
   600  000D2A  ECA3  F004         	call	_init	;wreg free
   601                           
   602                           ; BSR set to: 0
   603                           ;main.c: 535:     busy_wait();
   604  000D2E  ECFA  F005         	call	_busy_wait	;wreg free
   605  000D32                     l2609:
   606                           
   607                           ; BSR set to: 0
   608                           ;main.c: 538:         poll_g();
   609  000D32  EC2D  F005         	call	_poll_g	;wreg free
   610                           
   611                           ;main.c: 539:         draw();
   612  000D36  EC09  F000         	call	_draw	;wreg free
   613  000D3A  D7FB               	goto	l2609
   614  000D3C                     __end_of_main:
   615                           	callstack 0
   616                           
   617 ;; *************** function _poll_g *****************
   618 ;; Defined at:
   619 ;;		line 509 in file "main.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;		None
   622 ;; Auto vars:     Size  Location     Type
   623 ;;  i               1   30[COMRAM] unsigned char 
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   634 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   636 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   637 ;;Total ram usage:        1 bytes
   638 ;; Hardware stack levels used:    1
   639 ;; Hardware stack levels required when called:    6
   640 ;; This function calls:
   641 ;;		_move_down
   642 ;;		_move_left
   643 ;;		_move_right
   644 ;;		_move_up
   645 ;; This function is called by:
   646 ;;		_main
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text1
   651  000A5A                     __ptext1:
   652                           	callstack 0
   653  000A5A                     _poll_g:
   654                           	callstack 24
   655                           
   656                           ;main.c: 510:     PORTG_current[KEY_RIGHT] = PORTGbits.RG0;
   657                           
   658                           ; BSR set to: 0
   659                           ;incstack = 0
   660  000A5A  0E00               	movlw	0
   661  000A5C  B086               	btfsc	134,0,c	;volatile
   662  000A5E  0E01               	movlw	1
   663  000A60  6E07               	movwf	_PORTG_current^0,c
   664                           
   665                           ;main.c: 511:     PORTG_current[KEY_UP] = PORTGbits.RG2;
   666  000A62  0E00               	movlw	0
   667  000A64  B486               	btfsc	134,2,c	;volatile
   668  000A66  0E01               	movlw	1
   669  000A68  6E08               	movwf	(_PORTG_current+1)^0,c
   670                           
   671                           ;main.c: 512:     PORTG_current[KEY_DOWN] = PORTGbits.RG3;
   672  000A6A  0E00               	movlw	0
   673  000A6C  B686               	btfsc	134,3,c	;volatile
   674  000A6E  0E01               	movlw	1
   675  000A70  6E09               	movwf	(_PORTG_current+2)^0,c
   676                           
   677                           ;main.c: 513:     PORTG_current[KEY_LEFT] = PORTGbits.RG4;
   678  000A72  0E00               	movlw	0
   679  000A74  B886               	btfsc	134,4,c	;volatile
   680  000A76  0E01               	movlw	1
   681  000A78  6E0A               	movwf	(_PORTG_current+3)^0,c
   682                           
   683                           ;main.c: 515:     if (PORTG_current[KEY_RIGHT] && !PORTG_previous[KEY_RIGHT])
   684  000A7A  5007               	movf	_PORTG_current^0,w,c
   685  000A7C  B4D8               	btfsc	status,2,c
   686  000A7E  D004               	goto	l2575
   687  000A80  500B               	movf	_PORTG_previous^0,w,c
   688  000A82  B4D8               	btfsc	status,2,c
   689                           
   690                           ;main.c: 516:         move_right();
   691  000A84  EC57  F006         	call	_move_right	;wreg free
   692  000A88                     l2575:
   693                           
   694                           ;main.c: 517:     if (PORTG_current[KEY_UP] && !PORTG_previous[KEY_UP])
   695  000A88  5008               	movf	(_PORTG_current+1)^0,w,c
   696  000A8A  B4D8               	btfsc	status,2,c
   697  000A8C  D004               	goto	l2581
   698  000A8E  500C               	movf	(_PORTG_previous+1)^0,w,c
   699  000A90  B4D8               	btfsc	status,2,c
   700                           
   701                           ;main.c: 518:         move_up();
   702  000A92  EC47  F006         	call	_move_up	;wreg free
   703  000A96                     l2581:
   704                           
   705                           ;main.c: 519:     if (PORTG_current[KEY_DOWN] && !PORTG_previous[KEY_DOWN])
   706  000A96  5009               	movf	(_PORTG_current+2)^0,w,c
   707  000A98  B4D8               	btfsc	status,2,c
   708  000A9A  D004               	goto	l2587
   709  000A9C  500D               	movf	(_PORTG_previous+2)^0,w,c
   710  000A9E  B4D8               	btfsc	status,2,c
   711                           
   712                           ;main.c: 520:         move_down();
   713  000AA0  EC77  F006         	call	_move_down	;wreg free
   714  000AA4                     l2587:
   715                           
   716                           ;main.c: 521:     if (PORTG_current[KEY_LEFT] && !PORTG_previous[KEY_LEFT])
   717  000AA4  500A               	movf	(_PORTG_current+3)^0,w,c
   718  000AA6  B4D8               	btfsc	status,2,c
   719  000AA8  D004               	goto	l2593
   720  000AAA  500E               	movf	(_PORTG_previous+3)^0,w,c
   721  000AAC  B4D8               	btfsc	status,2,c
   722                           
   723                           ;main.c: 522:         move_left();
   724  000AAE  EC67  F006         	call	_move_left	;wreg free
   725  000AB2                     l2593:
   726                           
   727                           ;main.c: 524:     for (char i = 0; i < ARROW_KEY_COUNT; i++) {
   728  000AB2  0E00               	movlw	0
   729  000AB4  6E42               	movwf	poll_g@i^0,c
   730  000AB6                     l2599:
   731                           
   732                           ;main.c: 525:         PORTG_previous[i] = PORTG_current[i];
   733  000AB6  5042               	movf	poll_g@i^0,w,c
   734  000AB8  0F07               	addlw	low _PORTG_current
   735  000ABA  6ED9               	movwf	fsr2l,c
   736  000ABC  6ADA               	clrf	fsr2h,c
   737  000ABE  5042               	movf	poll_g@i^0,w,c
   738  000AC0  0F0B               	addlw	low _PORTG_previous
   739  000AC2  6EE1               	movwf	fsr1l,c
   740  000AC4  6AE2               	clrf	fsr1h,c
   741  000AC6  CFDF FFE7          	movff	indf2,indf1
   742                           
   743                           ;main.c: 526:     }
   744  000ACA  2A42               	incf	poll_g@i^0,f,c
   745  000ACC  0E03               	movlw	3
   746  000ACE  6442               	cpfsgt	poll_g@i^0,c
   747  000AD0  D7F2               	goto	l2599
   748  000AD2  0012               	return	
   749  000AD4                     __end_of_poll_g:
   750                           	callstack 0
   751                           
   752 ;; *************** function _move_up *****************
   753 ;; Defined at:
   754 ;;		line 499 in file "main.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;		None
   757 ;; Auto vars:     Size  Location     Type
   758 ;;  newPosition     2    9[BANK0 ] struct Position
   759 ;; Return value:  Size  Location     Type
   760 ;;                  1    wreg      void 
   761 ;; Registers used:
   762 ;;		wreg, status,2, status,0, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 3F/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   771 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   772 ;;Total ram usage:        2 bytes
   773 ;; Hardware stack levels used:    1
   774 ;; Hardware stack levels required when called:    5
   775 ;; This function calls:
   776 ;;		_move
   777 ;; This function is called by:
   778 ;;		_poll_g
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text2
   783  000C8E                     __ptext2:
   784                           	callstack 0
   785  000C8E                     _move_up:
   786                           	callstack 24
   787                           
   788                           ;main.c: 500:     Position newPosition = {position.x, position.y - 1};
   789                           
   790                           ;incstack = 0
   791  000C8E  C011  F0AC         	movff	move_up@F4755,move_up@newPosition
   792  000C92  C012  F0AD         	movff	move_up@F4755+1,move_up@newPosition+1
   793  000C96  C01B  F0AC         	movff	_position,move_up@newPosition
   794  000C9A  041C               	decf	(_position+1)^0,w,c
   795  000C9C  0100               	movlb	0	; () banked
   796  000C9E  6FAD               	movwf	(move_up@newPosition+1)& (0+255),b
   797                           
   798                           ; BSR set to: 0
   799                           ;main.c: 501:     move(newPosition);
   800  000CA0  C0AC  F0AA         	movff	move_up@newPosition,move@newPosition
   801  000CA4  C0AD  F0AB         	movff	move_up@newPosition+1,move@newPosition+1
   802  000CA8  EC87  F006         	call	_move	;wreg free
   803                           
   804                           ; BSR set to: 0
   805  000CAC  0012               	return		;funcret
   806  000CAE                     __end_of_move_up:
   807                           	callstack 0
   808                           
   809 ;; *************** function _move_right *****************
   810 ;; Defined at:
   811 ;;		line 494 in file "main.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  newPosition     2    9[BANK0 ] struct Position
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, status,2, status,0, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 3F/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   826 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   829 ;;Total ram usage:        2 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    5
   832 ;; This function calls:
   833 ;;		_move
   834 ;; This function is called by:
   835 ;;		_poll_g
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text3
   840  000CAE                     __ptext3:
   841                           	callstack 0
   842  000CAE                     _move_right:
   843                           	callstack 24
   844                           
   845                           ;main.c: 495:     Position newPosition = {position.x + 1, position.y};
   846                           
   847                           ; BSR set to: 0
   848                           ;incstack = 0
   849  000CAE  C013  F0AC         	movff	move_right@F4752,move_right@newPosition
   850  000CB2  C014  F0AD         	movff	move_right@F4752+1,move_right@newPosition+1
   851  000CB6  281B               	incf	_position^0,w,c
   852  000CB8  0100               	movlb	0	; () banked
   853  000CBA  6FAC               	movwf	move_right@newPosition& (0+255),b
   854                           
   855                           ; BSR set to: 0
   856  000CBC  C01C  F0AD         	movff	_position+1,move_right@newPosition+1
   857                           
   858                           ; BSR set to: 0
   859                           ;main.c: 496:     move(newPosition);
   860  000CC0  C0AC  F0AA         	movff	move_right@newPosition,move@newPosition
   861  000CC4  C0AD  F0AB         	movff	move_right@newPosition+1,move@newPosition+1
   862  000CC8  EC87  F006         	call	_move	;wreg free
   863                           
   864                           ; BSR set to: 0
   865  000CCC  0012               	return		;funcret
   866  000CCE                     __end_of_move_right:
   867                           	callstack 0
   868                           
   869 ;; *************** function _move_left *****************
   870 ;; Defined at:
   871 ;;		line 489 in file "main.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;		None
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  newPosition     2    9[BANK0 ] struct Position
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, status,2, status,0, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 3F/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   886 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   888 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   889 ;;Total ram usage:        2 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; Hardware stack levels required when called:    5
   892 ;; This function calls:
   893 ;;		_move
   894 ;; This function is called by:
   895 ;;		_poll_g
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text4
   900  000CCE                     __ptext4:
   901                           	callstack 0
   902  000CCE                     _move_left:
   903                           	callstack 24
   904                           
   905                           ;main.c: 490:     Position newPosition = {position.x - 1, position.y};
   906                           
   907                           ; BSR set to: 0
   908                           ;incstack = 0
   909  000CCE  C015  F0AC         	movff	move_left@F4749,move_left@newPosition
   910  000CD2  C016  F0AD         	movff	move_left@F4749+1,move_left@newPosition+1
   911  000CD6  041B               	decf	_position^0,w,c
   912  000CD8  0100               	movlb	0	; () banked
   913  000CDA  6FAC               	movwf	move_left@newPosition& (0+255),b
   914                           
   915                           ; BSR set to: 0
   916  000CDC  C01C  F0AD         	movff	_position+1,move_left@newPosition+1
   917                           
   918                           ; BSR set to: 0
   919                           ;main.c: 491:     move(newPosition);
   920  000CE0  C0AC  F0AA         	movff	move_left@newPosition,move@newPosition
   921  000CE4  C0AD  F0AB         	movff	move_left@newPosition+1,move@newPosition+1
   922  000CE8  EC87  F006         	call	_move	;wreg free
   923                           
   924                           ; BSR set to: 0
   925  000CEC  0012               	return		;funcret
   926  000CEE                     __end_of_move_left:
   927                           	callstack 0
   928                           
   929 ;; *************** function _init *****************
   930 ;; Defined at:
   931 ;;		line 161 in file "main.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;  j               2    4[BANK0 ] int 
   936 ;;  i               2    6[BANK0 ] int 
   937 ;;  i               2    2[BANK0 ] int 
   938 ;;  4608            2    0[BANK0 ] struct Position
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 3F/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   949 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;Total ram usage:        8 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; Hardware stack levels required when called:    3
   955 ;; This function calls:
   956 ;;		Nothing
   957 ;; This function is called by:
   958 ;;		_main
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           	psect	text5
   963  000946                     __ptext5:
   964                           	callstack 0
   965  000946                     _init:
   966                           	callstack 27
   967                           
   968                           ;main.c: 202:     position = (Position){0, 0};;main.c: 162:     INTCON = (1 << 5) | (1 <
      +                          < 3);
   969                           
   970                           ; BSR set to: 0
   971                           ;incstack = 0
   972  000946  0E28               	movlw	40
   973  000948  6EF2               	movwf	242,c	;volatile
   974                           
   975                           ;main.c: 163:     T0CON = (1 << 3) | (1 << 7);
   976  00094A  0E88               	movlw	136
   977  00094C  6ED5               	movwf	213,c	;volatile
   978                           
   979                           ;main.c: 165:     for (int i = 0; i < 4; i++) {
   980  00094E  0E00               	movlw	0
   981  000950  0100               	movlb	0	; () banked
   982  000952  6FA6               	movwf	(init@i+1)& (0+255),b
   983  000954  0E00               	movlw	0
   984  000956  6FA5               	movwf	init@i& (0+255),b
   985  000958                     l2413:
   986                           
   987                           ; BSR set to: 0
   988                           ;main.c: 166:         for (int j = 0; j < 8; j++) {
   989  000958  0E00               	movlw	0
   990  00095A  6FA8               	movwf	(init@j+1)& (0+255),b
   991  00095C  0E00               	movlw	0
   992  00095E  6FA7               	movwf	init@j& (0+255),b
   993  000960                     l2419:
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 167:             grid[i][j] = LED_OFF;
   997  000960  51A5               	movf	init@i& (0+255),w,b
   998  000962  0D08               	mullw	8
   999  000964  50F3               	movf	243,w,c
  1000  000966  0F60               	addlw	low _grid
  1001  000968  25A7               	addwf	init@j& (0+255),w,b
  1002  00096A  6ED9               	movwf	fsr2l,c
  1003  00096C  6ADA               	clrf	fsr2h,c
  1004  00096E  0E00               	movlw	0
  1005  000970  6EDF               	movwf	indf2,c
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;main.c: 168:         }
  1009  000972  4BA7               	infsnz	init@j& (0+255),f,b
  1010  000974  2BA8               	incf	(init@j+1)& (0+255),f,b
  1011                           
  1012                           ; BSR set to: 0
  1013  000976  BFA8               	btfsc	(init@j+1)& (0+255),7,b
  1014  000978  D7F3               	goto	l2419
  1015  00097A  51A8               	movf	(init@j+1)& (0+255),w,b
  1016  00097C  E104               	bnz	u1920
  1017  00097E  0E08               	movlw	8
  1018  000980  5DA7               	subwf	init@j& (0+255),w,b
  1019  000982  A0D8               	btfss	status,0,c
  1020  000984  D7ED               	goto	l2419
  1021  000986                     u1920:
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;main.c: 169:     }
  1025  000986  4BA5               	infsnz	init@i& (0+255),f,b
  1026  000988  2BA6               	incf	(init@i+1)& (0+255),f,b
  1027                           
  1028                           ; BSR set to: 0
  1029  00098A  BFA6               	btfsc	(init@i+1)& (0+255),7,b
  1030  00098C  D7E5               	goto	l2413
  1031  00098E  51A6               	movf	(init@i+1)& (0+255),w,b
  1032  000990  E104               	bnz	u1930
  1033  000992  0E04               	movlw	4
  1034  000994  5DA5               	subwf	init@i& (0+255),w,b
  1035  000996  A0D8               	btfss	status,0,c
  1036  000998  D7DF               	goto	l2413
  1037  00099A                     u1930:
  1038                           
  1039                           ; BSR set to: 0
  1040                           ;main.c: 171:     blink_counter = 0;
  1041  00099A  0E00               	movlw	0
  1042  00099C  6E1E               	movwf	(_blink_counter+1)^0,c
  1043  00099E  0E00               	movlw	0
  1044  0009A0  6E1D               	movwf	_blink_counter^0,c
  1045                           
  1046                           ;main.c: 172:     counter250ms = 0;
  1047  0009A2  0E00               	movlw	0
  1048  0009A4  6E23               	movwf	_counter250ms^0,c
  1049                           
  1050                           ;main.c: 173:     will_down = 0;
  1051  0009A6  0E00               	movlw	0
  1052  0009A8  6FA2               	movwf	_will_down& (0+255),b
  1053                           
  1054                           ;main.c: 175:     TRISG = 0b00011101;
  1055  0009AA  0E1D               	movlw	29
  1056  0009AC  6E98               	movwf	152,c	;volatile
  1057                           
  1058                           ;main.c: 176:     TRISB = 0b01100000;
  1059  0009AE  0E60               	movlw	96
  1060  0009B0  6E93               	movwf	147,c	;volatile
  1061                           
  1062                           ;main.c: 177:     TRISC = 0x00;
  1063  0009B2  0E00               	movlw	0
  1064  0009B4  6E94               	movwf	148,c	;volatile
  1065                           
  1066                           ;main.c: 178:     TRISD = 0x00;
  1067  0009B6  0E00               	movlw	0
  1068  0009B8  6E95               	movwf	149,c	;volatile
  1069                           
  1070                           ;main.c: 179:     TRISE = 0x00;
  1071  0009BA  0E00               	movlw	0
  1072  0009BC  6E96               	movwf	150,c	;volatile
  1073                           
  1074                           ;main.c: 180:     TRISF = 0x00;
  1075  0009BE  0E00               	movlw	0
  1076  0009C0  6E97               	movwf	151,c	;volatile
  1077                           
  1078                           ;main.c: 181:     TRISH = 0x00;
  1079  0009C2  0E00               	movlw	0
  1080  0009C4  6E99               	movwf	153,c	;volatile
  1081                           
  1082                           ;main.c: 182:     TRISJ = 0x00;
  1083  0009C6  0E00               	movlw	0
  1084  0009C8  6E9A               	movwf	154,c	;volatile
  1085                           
  1086                           ;main.c: 183:     PORTG = 0;
  1087  0009CA  0E00               	movlw	0
  1088  0009CC  6E86               	movwf	134,c	;volatile
  1089                           
  1090                           ;main.c: 184:     LATG = 0;
  1091  0009CE  0E00               	movlw	0
  1092  0009D0  6E8F               	movwf	143,c	;volatile
  1093                           
  1094                           ;main.c: 185:     PORTB = 0;
  1095  0009D2  0E00               	movlw	0
  1096  0009D4  6E81               	movwf	129,c	;volatile
  1097                           
  1098                           ;main.c: 186:     LATB = 0;
  1099  0009D6  0E00               	movlw	0
  1100  0009D8  6E8A               	movwf	138,c	;volatile
  1101                           
  1102                           ;main.c: 187:     PORTC = 0;
  1103  0009DA  0E00               	movlw	0
  1104  0009DC  6E82               	movwf	130,c	;volatile
  1105                           
  1106                           ;main.c: 188:     LATC = 0;
  1107  0009DE  0E00               	movlw	0
  1108  0009E0  6E8B               	movwf	139,c	;volatile
  1109                           
  1110                           ;main.c: 189:     PORTD = 0;
  1111  0009E2  0E00               	movlw	0
  1112  0009E4  6E83               	movwf	131,c	;volatile
  1113                           
  1114                           ;main.c: 190:     LATD = 0;
  1115  0009E6  0E00               	movlw	0
  1116  0009E8  6E8C               	movwf	140,c	;volatile
  1117                           
  1118                           ;main.c: 191:     PORTE = 0;
  1119  0009EA  0E00               	movlw	0
  1120  0009EC  6E84               	movwf	132,c	;volatile
  1121                           
  1122                           ;main.c: 192:     LATE = 0;
  1123  0009EE  0E00               	movlw	0
  1124  0009F0  6E8D               	movwf	141,c	;volatile
  1125                           
  1126                           ;main.c: 193:     PORTF = 0;
  1127  0009F2  0E00               	movlw	0
  1128  0009F4  6E85               	movwf	133,c	;volatile
  1129                           
  1130                           ;main.c: 194:     LATF = 0;
  1131  0009F6  0E00               	movlw	0
  1132  0009F8  6E8E               	movwf	142,c	;volatile
  1133                           
  1134                           ;main.c: 195:     PORTH = 0b00001111;
  1135  0009FA  0E0F               	movlw	15
  1136  0009FC  6E87               	movwf	135,c	;volatile
  1137                           
  1138                           ;main.c: 196:     PORTJ = 0b00011111;
  1139  0009FE  0E1F               	movlw	31
  1140  000A00  6E88               	movwf	136,c	;volatile
  1141                           
  1142                           ;main.c: 198:     TMR0L = 0xCE;
  1143  000A02  0ECE               	movlw	206
  1144  000A04  6ED6               	movwf	214,c	;volatile
  1145                           
  1146                           ;main.c: 199:     TMR0H = 0x3C;
  1147  000A06  0E3C               	movlw	60
  1148  000A08  6ED7               	movwf	215,c	;volatile
  1149                           
  1150                           ;main.c: 201:     type = 0;
  1151  000A0A  0E00               	movlw	0
  1152  000A0C  6E21               	movwf	_type^0,c
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;main.c: 202:     position = (Position){0, 0};
  1156  000A0E  C019  F0A3         	movff	init@F4607,init@4608
  1157  000A12  C01A  F0A4         	movff	init@F4607+1,init@4608+1
  1158                           
  1159                           ; BSR set to: 0
  1160  000A16  C0A3  F01B         	movff	init@4608,_position
  1161  000A1A  C0A4  F01C         	movff	init@4608+1,_position+1
  1162                           
  1163                           ;main.c: 203:     rotation = 0;
  1164  000A1E  0E00               	movlw	0
  1165  000A20  6E22               	movwf	_rotation^0,c
  1166                           
  1167                           ;main.c: 205:     for (int i=0; i<ARROW_KEY_COUNT; i++)
  1168  000A22  0E00               	movlw	0
  1169  000A24  6FAA               	movwf	(init@i_333+1)& (0+255),b
  1170  000A26  0E00               	movlw	0
  1171  000A28  6FA9               	movwf	init@i_333& (0+255),b
  1172  000A2A                     l2439:
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;main.c: 206:     {;main.c: 207:         PORTG_previous[i] = 0;
  1176  000A2A  51A9               	movf	init@i_333& (0+255),w,b
  1177  000A2C  0F0B               	addlw	low _PORTG_previous
  1178  000A2E  6ED9               	movwf	fsr2l,c
  1179  000A30  6ADA               	clrf	fsr2h,c
  1180  000A32  0E00               	movlw	0
  1181  000A34  6EDF               	movwf	indf2,c
  1182                           
  1183                           ;main.c: 208:         PORTG_current[i] = 0;
  1184  000A36  51A9               	movf	init@i_333& (0+255),w,b
  1185  000A38  0F07               	addlw	low _PORTG_current
  1186  000A3A  6ED9               	movwf	fsr2l,c
  1187  000A3C  6ADA               	clrf	fsr2h,c
  1188  000A3E  0E00               	movlw	0
  1189  000A40  6EDF               	movwf	indf2,c
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;main.c: 209:     }
  1193  000A42  4BA9               	infsnz	init@i_333& (0+255),f,b
  1194  000A44  2BAA               	incf	(init@i_333+1)& (0+255),f,b
  1195                           
  1196                           ; BSR set to: 0
  1197  000A46  BFAA               	btfsc	(init@i_333+1)& (0+255),7,b
  1198  000A48  D7F0               	goto	l2439
  1199  000A4A  51AA               	movf	(init@i_333+1)& (0+255),w,b
  1200  000A4C  E105               	bnz	u1940
  1201  000A4E  0E04               	movlw	4
  1202  000A50  5DA9               	subwf	init@i_333& (0+255),w,b
  1203  000A52  B0D8               	btfsc	status,0,c
  1204  000A54  0012               	return	
  1205  000A56  D7E9               	goto	l2439
  1206  000A58                     u1940:
  1207                           
  1208                           ; BSR set to: 0
  1209  000A58  0012               	return		;funcret
  1210  000A5A                     __end_of_init:
  1211                           	callstack 0
  1212                           
  1213 ;; *************** function _draw *****************
  1214 ;; Defined at:
  1215 ;;		line 296 in file "main.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;		None
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  4686            2   51[BANK0 ] struct Position
  1220 ;;  4684            2   49[BANK0 ] struct Position
  1221 ;;  4682            2   47[BANK0 ] struct Position
  1222 ;;  4680            2   45[BANK0 ] struct Position
  1223 ;;  4678            2   43[BANK0 ] struct Position
  1224 ;;  4676            2   41[BANK0 ] struct Position
  1225 ;;  4674            2   39[BANK0 ] struct Position
  1226 ;;  4672            2   37[BANK0 ] struct Position
  1227 ;;  4670            2   35[BANK0 ] struct Position
  1228 ;;  4668            2   33[BANK0 ] struct Position
  1229 ;;  4666            2   31[BANK0 ] struct Position
  1230 ;;  4664            2   29[BANK0 ] struct Position
  1231 ;;  4662            2   27[BANK0 ] struct Position
  1232 ;;  4660            2   25[BANK0 ] struct Position
  1233 ;;  4658            2   23[BANK0 ] struct Position
  1234 ;;  4656            2   21[BANK0 ] struct Position
  1235 ;;  4654            2   19[BANK0 ] struct Position
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      void 
  1238 ;; Registers used:
  1239 ;;		wreg, status,2, status,0, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 3F/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Locals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;      Totals:         0      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;Total ram usage:       42 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    6
  1252 ;; This function calls:
  1253 ;;		_move_down
  1254 ;;		_setLed
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text6
  1261  000012                     __ptext6:
  1262                           	callstack 0
  1263  000012                     _draw:
  1264                           	callstack 24
  1265                           
  1266                           ;main.c: 312:             }, blink_on);;main.c: 319:             }, blink_on);;main.c: 3
      +                          23:             }, blink_on);;main.c: 327:             }, blink_on);;main.c: 331:       
      +                                }, blink_on);;main.c: 341:                     }, blink_on);;main.c: 345:         
      +                                      }, blink_on);;main.c: 349:                     }, blink_on);;main.c: 355:   
      +                                            }, blink_on);;main.c: 359:                     }, blink_on);;main.c: 3
      +                          63:                     }, blink_on);;main.c: 369:                     }, blink_on);
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;incstack = 0
  1270  000012  0100               	movlb	0	; () banked
  1271  000014  51A2               	movf	_will_down& (0+255),w,b
  1272  000016  B4D8               	btfsc	status,2,c
  1273  000018  D004               	goto	l2451
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;main.c: 298:         move_down();
  1277  00001A  EC77  F006         	call	_move_down	;wreg free
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;main.c: 299:         will_down = 0;
  1281  00001E  0E00               	movlw	0
  1282  000020  6FA2               	movwf	_will_down& (0+255),b
  1283  000022                     l2451:
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;main.c: 302:     LATC = (unsigned char) ((grid[0][0] << 0) | (grid[0][1] << 1) | (grid[
      +                          0][2] << 2) | (grid[0][3] << 3) | (grid[0][4] << 4) | (grid[0][5] << 5) | (grid[0][6] <<
      +                           6) | (grid[0][7] << 7));
  1287  000022  6BAE               	clrf	??_draw& (0+255),b
  1288  000024  A167               	btfss	(_grid+7)& (0+255),0,b
  1289  000026  D001               	bra	u1965
  1290  000028  8FAE               	bsf	??_draw& (0+255),7,b
  1291  00002A                     u1965:
  1292  00002A  C066  F0AF         	movff	_grid+6,??_draw+1
  1293  00002E  0E06               	movlw	6
  1294  000030  6FB0               	movwf	(??_draw+2)& (0+255),b
  1295  000032                     u1975:
  1296  000032  90D8               	bcf	status,0,c
  1297  000034  37AF               	rlcf	(??_draw+1)& (0+255),f,b
  1298  000036  2FB0               	decfsz	(??_draw+2)& (0+255),f,b
  1299  000038  D7FC               	goto	u1975
  1300  00003A  C065  F0B1         	movff	_grid+5,??_draw+3
  1301  00003E  0E05               	movlw	5
  1302  000040  6FB2               	movwf	(??_draw+4)& (0+255),b
  1303  000042                     u1985:
  1304  000042  90D8               	bcf	status,0,c
  1305  000044  37B1               	rlcf	(??_draw+3)& (0+255),f,b
  1306  000046  2FB2               	decfsz	(??_draw+4)& (0+255),f,b
  1307  000048  D7FC               	goto	u1985
  1308  00004A  C064  F0B3         	movff	_grid+4,??_draw+5
  1309  00004E  3BB3               	swapf	(??_draw+5)& (0+255),f,b
  1310  000050  0EF0               	movlw	240
  1311  000052  17B3               	andwf	(??_draw+5)& (0+255),f,b
  1312  000054  C063  F0B4         	movff	_grid+3,??_draw+6
  1313  000058  90D8               	bcf	status,0,c
  1314  00005A  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1315  00005C  90D8               	bcf	status,0,c
  1316  00005E  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1317  000060  90D8               	bcf	status,0,c
  1318  000062  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1319  000064  C062  F0B5         	movff	_grid+2,??_draw+7
  1320  000068  90D8               	bcf	status,0,c
  1321  00006A  37B5               	rlcf	(??_draw+7)& (0+255),f,b
  1322  00006C  90D8               	bcf	status,0,c
  1323  00006E  37B5               	rlcf	(??_draw+7)& (0+255),f,b
  1324  000070  5161               	movf	(_grid+1)& (0+255),w,b
  1325  000072  2561               	addwf	(_grid+1)& (0+255),w,b
  1326  000074  11B5               	iorwf	(??_draw+7)& (0+255),w,b
  1327  000076  11B4               	iorwf	(??_draw+6)& (0+255),w,b
  1328  000078  11B3               	iorwf	(??_draw+5)& (0+255),w,b
  1329  00007A  11B1               	iorwf	(??_draw+3)& (0+255),w,b
  1330  00007C  11AF               	iorwf	(??_draw+1)& (0+255),w,b
  1331  00007E  11AE               	iorwf	??_draw& (0+255),w,b
  1332  000080  1160               	iorwf	_grid& (0+255),w,b
  1333  000082  6E8B               	movwf	139,c	;volatile
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;main.c: 303:     LATD = (unsigned char) ((grid[1][0] << 0) | (grid[1][1] << 1) | (grid[
      +                          1][2] << 2) | (grid[1][3] << 3) | (grid[1][4] << 4) | (grid[1][5] << 5) | (grid[1][6] <<
      +                           6) | (grid[1][7] << 7));
  1337  000084  6BAE               	clrf	??_draw& (0+255),b
  1338  000086  A16F               	btfss	(_grid+15)& (0+255),0,b
  1339  000088  D001               	bra	u1995
  1340  00008A  8FAE               	bsf	??_draw& (0+255),7,b
  1341  00008C                     u1995:
  1342  00008C  C06E  F0AF         	movff	_grid+14,??_draw+1
  1343  000090  0E06               	movlw	6
  1344  000092  6FB0               	movwf	(??_draw+2)& (0+255),b
  1345  000094                     u2005:
  1346  000094  90D8               	bcf	status,0,c
  1347  000096  37AF               	rlcf	(??_draw+1)& (0+255),f,b
  1348  000098  2FB0               	decfsz	(??_draw+2)& (0+255),f,b
  1349  00009A  D7FC               	goto	u2005
  1350  00009C  C06D  F0B1         	movff	_grid+13,??_draw+3
  1351  0000A0  0E05               	movlw	5
  1352  0000A2  6FB2               	movwf	(??_draw+4)& (0+255),b
  1353  0000A4                     u2015:
  1354  0000A4  90D8               	bcf	status,0,c
  1355  0000A6  37B1               	rlcf	(??_draw+3)& (0+255),f,b
  1356  0000A8  2FB2               	decfsz	(??_draw+4)& (0+255),f,b
  1357  0000AA  D7FC               	goto	u2015
  1358  0000AC  C06C  F0B3         	movff	_grid+12,??_draw+5
  1359  0000B0  3BB3               	swapf	(??_draw+5)& (0+255),f,b
  1360  0000B2  0EF0               	movlw	240
  1361  0000B4  17B3               	andwf	(??_draw+5)& (0+255),f,b
  1362  0000B6  C06B  F0B4         	movff	_grid+11,??_draw+6
  1363  0000BA  90D8               	bcf	status,0,c
  1364  0000BC  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1365  0000BE  90D8               	bcf	status,0,c
  1366  0000C0  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1367  0000C2  90D8               	bcf	status,0,c
  1368  0000C4  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1369  0000C6  C06A  F0B5         	movff	_grid+10,??_draw+7
  1370  0000CA  90D8               	bcf	status,0,c
  1371  0000CC  37B5               	rlcf	(??_draw+7)& (0+255),f,b
  1372  0000CE  90D8               	bcf	status,0,c
  1373  0000D0  37B5               	rlcf	(??_draw+7)& (0+255),f,b
  1374  0000D2  5169               	movf	(_grid+9)& (0+255),w,b
  1375  0000D4  2569               	addwf	(_grid+9)& (0+255),w,b
  1376  0000D6  11B5               	iorwf	(??_draw+7)& (0+255),w,b
  1377  0000D8  11B4               	iorwf	(??_draw+6)& (0+255),w,b
  1378  0000DA  11B3               	iorwf	(??_draw+5)& (0+255),w,b
  1379  0000DC  11B1               	iorwf	(??_draw+3)& (0+255),w,b
  1380  0000DE  11AF               	iorwf	(??_draw+1)& (0+255),w,b
  1381  0000E0  11AE               	iorwf	??_draw& (0+255),w,b
  1382  0000E2  1168               	iorwf	(_grid+8)& (0+255),w,b
  1383  0000E4  6E8C               	movwf	140,c	;volatile
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;main.c: 304:     LATE = (unsigned char) ((grid[2][0] << 0) | (grid[2][1] << 1) | (grid[
      +                          2][2] << 2) | (grid[2][3] << 3) | (grid[2][4] << 4) | (grid[2][5] << 5) | (grid[2][6] <<
      +                           6) | (grid[2][7] << 7));
  1387  0000E6  6BAE               	clrf	??_draw& (0+255),b
  1388  0000E8  A177               	btfss	(_grid+23)& (0+255),0,b
  1389  0000EA  D001               	bra	u2025
  1390  0000EC  8FAE               	bsf	??_draw& (0+255),7,b
  1391  0000EE                     u2025:
  1392  0000EE  C076  F0AF         	movff	_grid+22,??_draw+1
  1393  0000F2  0E06               	movlw	6
  1394  0000F4  6FB0               	movwf	(??_draw+2)& (0+255),b
  1395  0000F6                     u2035:
  1396  0000F6  90D8               	bcf	status,0,c
  1397  0000F8  37AF               	rlcf	(??_draw+1)& (0+255),f,b
  1398  0000FA  2FB0               	decfsz	(??_draw+2)& (0+255),f,b
  1399  0000FC  D7FC               	goto	u2035
  1400  0000FE  C075  F0B1         	movff	_grid+21,??_draw+3
  1401  000102  0E05               	movlw	5
  1402  000104  6FB2               	movwf	(??_draw+4)& (0+255),b
  1403  000106                     u2045:
  1404  000106  90D8               	bcf	status,0,c
  1405  000108  37B1               	rlcf	(??_draw+3)& (0+255),f,b
  1406  00010A  2FB2               	decfsz	(??_draw+4)& (0+255),f,b
  1407  00010C  D7FC               	goto	u2045
  1408  00010E  C074  F0B3         	movff	_grid+20,??_draw+5
  1409  000112  3BB3               	swapf	(??_draw+5)& (0+255),f,b
  1410  000114  0EF0               	movlw	240
  1411  000116  17B3               	andwf	(??_draw+5)& (0+255),f,b
  1412  000118  C073  F0B4         	movff	_grid+19,??_draw+6
  1413  00011C  90D8               	bcf	status,0,c
  1414  00011E  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1415  000120  90D8               	bcf	status,0,c
  1416  000122  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1417  000124  90D8               	bcf	status,0,c
  1418  000126  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1419  000128  C072  F0B5         	movff	_grid+18,??_draw+7
  1420  00012C  90D8               	bcf	status,0,c
  1421  00012E  37B5               	rlcf	(??_draw+7)& (0+255),f,b
  1422  000130  90D8               	bcf	status,0,c
  1423  000132  37B5               	rlcf	(??_draw+7)& (0+255),f,b
  1424  000134  5171               	movf	(_grid+17)& (0+255),w,b
  1425  000136  2571               	addwf	(_grid+17)& (0+255),w,b
  1426  000138  11B5               	iorwf	(??_draw+7)& (0+255),w,b
  1427  00013A  11B4               	iorwf	(??_draw+6)& (0+255),w,b
  1428  00013C  11B3               	iorwf	(??_draw+5)& (0+255),w,b
  1429  00013E  11B1               	iorwf	(??_draw+3)& (0+255),w,b
  1430  000140  11AF               	iorwf	(??_draw+1)& (0+255),w,b
  1431  000142  11AE               	iorwf	??_draw& (0+255),w,b
  1432  000144  1170               	iorwf	(_grid+16)& (0+255),w,b
  1433  000146  6E8D               	movwf	141,c	;volatile
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;main.c: 305:     LATF = (unsigned char) ((grid[3][0] << 0) | (grid[3][1] << 1) | (grid[
      +                          3][2] << 2) | (grid[3][3] << 3) | (grid[3][4] << 4) | (grid[3][5] << 5) | (grid[3][6] <<
      +                           6) | (grid[3][7] << 7));
  1437  000148  6BAE               	clrf	??_draw& (0+255),b
  1438  00014A  A17F               	btfss	(_grid+31)& (0+255),0,b
  1439  00014C  D001               	bra	u2055
  1440  00014E  8FAE               	bsf	??_draw& (0+255),7,b
  1441  000150                     u2055:
  1442  000150  C07E  F0AF         	movff	_grid+30,??_draw+1
  1443  000154  0E06               	movlw	6
  1444  000156  6FB0               	movwf	(??_draw+2)& (0+255),b
  1445  000158                     u2065:
  1446  000158  90D8               	bcf	status,0,c
  1447  00015A  37AF               	rlcf	(??_draw+1)& (0+255),f,b
  1448  00015C  2FB0               	decfsz	(??_draw+2)& (0+255),f,b
  1449  00015E  D7FC               	goto	u2065
  1450  000160  C07D  F0B1         	movff	_grid+29,??_draw+3
  1451  000164  0E05               	movlw	5
  1452  000166  6FB2               	movwf	(??_draw+4)& (0+255),b
  1453  000168                     u2075:
  1454  000168  90D8               	bcf	status,0,c
  1455  00016A  37B1               	rlcf	(??_draw+3)& (0+255),f,b
  1456  00016C  2FB2               	decfsz	(??_draw+4)& (0+255),f,b
  1457  00016E  D7FC               	goto	u2075
  1458  000170  C07C  F0B3         	movff	_grid+28,??_draw+5
  1459  000174  3BB3               	swapf	(??_draw+5)& (0+255),f,b
  1460  000176  0EF0               	movlw	240
  1461  000178  17B3               	andwf	(??_draw+5)& (0+255),f,b
  1462  00017A  C07B  F0B4         	movff	_grid+27,??_draw+6
  1463  00017E  90D8               	bcf	status,0,c
  1464  000180  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1465  000182  90D8               	bcf	status,0,c
  1466  000184  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1467  000186  90D8               	bcf	status,0,c
  1468  000188  37B4               	rlcf	(??_draw+6)& (0+255),f,b
  1469  00018A  C07A  F0B5         	movff	_grid+26,??_draw+7
  1470  00018E  90D8               	bcf	status,0,c
  1471  000190  37B5               	rlcf	(??_draw+7)& (0+255),f,b
  1472  000192  90D8               	bcf	status,0,c
  1473  000194  37B5               	rlcf	(??_draw+7)& (0+255),f,b
  1474  000196  5179               	movf	(_grid+25)& (0+255),w,b
  1475  000198  2579               	addwf	(_grid+25)& (0+255),w,b
  1476  00019A  11B5               	iorwf	(??_draw+7)& (0+255),w,b
  1477  00019C  11B4               	iorwf	(??_draw+6)& (0+255),w,b
  1478  00019E  11B3               	iorwf	(??_draw+5)& (0+255),w,b
  1479  0001A0  11B1               	iorwf	(??_draw+3)& (0+255),w,b
  1480  0001A2  11AF               	iorwf	(??_draw+1)& (0+255),w,b
  1481  0001A4  11AE               	iorwf	??_draw& (0+255),w,b
  1482  0001A6  1178               	iorwf	(_grid+24)& (0+255),w,b
  1483  0001A8  6E8E               	movwf	142,c	;volatile
  1484                           
  1485                           ;main.c: 307:     switch (type) {
  1486  0001AA  D123               	goto	l2553
  1487  0001AC                     l224:
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;main.c: 309:         {;main.c: 310:             setLed((Position) {
  1491  0001AC  C0A0  F0B6         	movff	draw@F4653,draw@4654
  1492  0001B0  C0A1  F0B7         	movff	draw@F4653+1,draw@4654+1
  1493  0001B4  C01B  F0B6         	movff	_position,draw@4654
  1494  0001B8  C01C  F0B7         	movff	_position+1,draw@4654+1
  1495                           
  1496                           ; BSR set to: 0
  1497  0001BC  C0B6  F040         	movff	draw@4654,setLed@pos
  1498  0001C0  C0B7  F041         	movff	draw@4654+1,setLed@pos+1
  1499  0001C4  C0D8  F042         	movff	_blink_on,setLed@value
  1500  0001C8  EC0C  F004         	call	_setLed	;wreg free
  1501                           
  1502                           ;main.c: 313:             break;
  1503  0001CC  0012               	return	
  1504  0001CE                     l226:
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;main.c: 316:         {;main.c: 317:             setLed((Position) {
  1508  0001CE  C09E  F0B8         	movff	draw@F4655,draw@4656
  1509  0001D2  C09F  F0B9         	movff	draw@F4655+1,draw@4656+1
  1510  0001D6  C01B  F0B8         	movff	_position,draw@4656
  1511  0001DA  C01C  F0B9         	movff	_position+1,draw@4656+1
  1512                           
  1513                           ; BSR set to: 0
  1514  0001DE  C0B8  F040         	movff	draw@4656,setLed@pos
  1515  0001E2  C0B9  F041         	movff	draw@4656+1,setLed@pos+1
  1516  0001E6  C0D8  F042         	movff	_blink_on,setLed@value
  1517  0001EA  EC0C  F004         	call	_setLed	;wreg free
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;main.c: 321:             setLed((Position) {
  1521  0001EE  C09C  F0BA         	movff	draw@F4657,draw@4658
  1522  0001F2  C09D  F0BB         	movff	draw@F4657+1,draw@4658+1
  1523                           
  1524                           ; BSR set to: 0
  1525  0001F6  281B               	incf	_position^0,w,c
  1526  0001F8  6FBA               	movwf	draw@4658& (0+255),b
  1527                           
  1528                           ; BSR set to: 0
  1529  0001FA  C01C  F0BB         	movff	_position+1,draw@4658+1
  1530                           
  1531                           ; BSR set to: 0
  1532  0001FE  C0BA  F040         	movff	draw@4658,setLed@pos
  1533  000202  C0BB  F041         	movff	draw@4658+1,setLed@pos+1
  1534  000206  C0D8  F042         	movff	_blink_on,setLed@value
  1535  00020A  EC0C  F004         	call	_setLed	;wreg free
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;main.c: 325:             setLed((Position) {
  1539  00020E  C09A  F0BC         	movff	draw@F4659,draw@4660
  1540  000212  C09B  F0BD         	movff	draw@F4659+1,draw@4660+1
  1541                           
  1542                           ; BSR set to: 0
  1543  000216  C01B  F0BC         	movff	_position,draw@4660
  1544  00021A  281C               	incf	(_position+1)^0,w,c
  1545  00021C  6FBD               	movwf	(draw@4660+1)& (0+255),b
  1546                           
  1547                           ; BSR set to: 0
  1548  00021E  C0BC  F040         	movff	draw@4660,setLed@pos
  1549  000222  C0BD  F041         	movff	draw@4660+1,setLed@pos+1
  1550  000226  C0D8  F042         	movff	_blink_on,setLed@value
  1551  00022A  EC0C  F004         	call	_setLed	;wreg free
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 329:             setLed((Position) {
  1555  00022E  C098  F0BE         	movff	draw@F4661,draw@4662
  1556  000232  C099  F0BF         	movff	draw@F4661+1,draw@4662+1
  1557                           
  1558                           ; BSR set to: 0
  1559  000236  281B               	incf	_position^0,w,c
  1560  000238  6FBE               	movwf	draw@4662& (0+255),b
  1561                           
  1562                           ; BSR set to: 0
  1563  00023A  281C               	incf	(_position+1)^0,w,c
  1564  00023C  6FBF               	movwf	(draw@4662+1)& (0+255),b
  1565                           
  1566                           ; BSR set to: 0
  1567  00023E  C0BE  F040         	movff	draw@4662,setLed@pos
  1568  000242  C0BF  F041         	movff	draw@4662+1,setLed@pos+1
  1569  000246  C0D8  F042         	movff	_blink_on,setLed@value
  1570  00024A  EC0C  F004         	call	_setLed	;wreg free
  1571                           
  1572                           ;main.c: 332:             break;
  1573  00024E  0012               	return	
  1574  000250                     l229:
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 339:                     setLed((Position) {
  1578  000250  C096  F0C0         	movff	draw@F4663,draw@4664
  1579  000254  C097  F0C1         	movff	draw@F4663+1,draw@4664+1
  1580  000258  C01B  F0C0         	movff	_position,draw@4664
  1581  00025C  C01C  F0C1         	movff	_position+1,draw@4664+1
  1582                           
  1583                           ; BSR set to: 0
  1584  000260  C0C0  F040         	movff	draw@4664,setLed@pos
  1585  000264  C0C1  F041         	movff	draw@4664+1,setLed@pos+1
  1586  000268  C0D8  F042         	movff	_blink_on,setLed@value
  1587  00026C  EC0C  F004         	call	_setLed	;wreg free
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;main.c: 343:                     setLed((Position) {
  1591  000270  C094  F0C2         	movff	draw@F4665,draw@4666
  1592  000274  C095  F0C3         	movff	draw@F4665+1,draw@4666+1
  1593                           
  1594                           ; BSR set to: 0
  1595  000278  281B               	incf	_position^0,w,c
  1596  00027A  6FC2               	movwf	draw@4666& (0+255),b
  1597                           
  1598                           ; BSR set to: 0
  1599  00027C  C01C  F0C3         	movff	_position+1,draw@4666+1
  1600                           
  1601                           ; BSR set to: 0
  1602  000280  C0C2  F040         	movff	draw@4666,setLed@pos
  1603  000284  C0C3  F041         	movff	draw@4666+1,setLed@pos+1
  1604  000288  C0D8  F042         	movff	_blink_on,setLed@value
  1605  00028C  EC0C  F004         	call	_setLed	;wreg free
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;main.c: 347:                     setLed((Position) {
  1609  000290  C092  F0C4         	movff	draw@F4667,draw@4668
  1610  000294  C093  F0C5         	movff	draw@F4667+1,draw@4668+1
  1611  000298  281B               	incf	_position^0,w,c
  1612  00029A  6FC4               	movwf	draw@4668& (0+255),b
  1613  00029C  281C               	incf	(_position+1)^0,w,c
  1614  00029E  6FC5               	movwf	(draw@4668+1)& (0+255),b
  1615                           
  1616                           ; BSR set to: 0
  1617  0002A0  C0C4  F040         	movff	draw@4668,setLed@pos
  1618  0002A4  C0C5  F041         	movff	draw@4668+1,setLed@pos+1
  1619  0002A8  C0D8  F042         	movff	_blink_on,setLed@value
  1620  0002AC  EC0C  F004         	call	_setLed	;wreg free
  1621                           
  1622                           ;main.c: 350:                     break;
  1623  0002B0  0012               	return	
  1624  0002B2                     l231:
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;main.c: 353:                     setLed((Position) {
  1628  0002B2  C090  F0C6         	movff	draw@F4669,draw@4670
  1629  0002B6  C091  F0C7         	movff	draw@F4669+1,draw@4670+1
  1630  0002BA  C01B  F0C6         	movff	_position,draw@4670
  1631  0002BE  C01C  F0C7         	movff	_position+1,draw@4670+1
  1632                           
  1633                           ; BSR set to: 0
  1634  0002C2  C0C6  F040         	movff	draw@4670,setLed@pos
  1635  0002C6  C0C7  F041         	movff	draw@4670+1,setLed@pos+1
  1636  0002CA  C0D8  F042         	movff	_blink_on,setLed@value
  1637  0002CE  EC0C  F004         	call	_setLed	;wreg free
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;main.c: 357:                     setLed((Position) {
  1641  0002D2  C08E  F0C8         	movff	draw@F4671,draw@4672
  1642  0002D6  C08F  F0C9         	movff	draw@F4671+1,draw@4672+1
  1643                           
  1644                           ; BSR set to: 0
  1645  0002DA  281B               	incf	_position^0,w,c
  1646  0002DC  6FC8               	movwf	draw@4672& (0+255),b
  1647                           
  1648                           ; BSR set to: 0
  1649  0002DE  C01C  F0C9         	movff	_position+1,draw@4672+1
  1650                           
  1651                           ; BSR set to: 0
  1652  0002E2  C0C8  F040         	movff	draw@4672,setLed@pos
  1653  0002E6  C0C9  F041         	movff	draw@4672+1,setLed@pos+1
  1654  0002EA  C0D8  F042         	movff	_blink_on,setLed@value
  1655  0002EE  EC0C  F004         	call	_setLed	;wreg free
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 361:                     setLed((Position) {
  1659  0002F2  C08C  F0CA         	movff	draw@F4673,draw@4674
  1660  0002F6  C08D  F0CB         	movff	draw@F4673+1,draw@4674+1
  1661                           
  1662                           ; BSR set to: 0
  1663  0002FA  C01B  F0CA         	movff	_position,draw@4674
  1664  0002FE  281C               	incf	(_position+1)^0,w,c
  1665  000300  6FCB               	movwf	(draw@4674+1)& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668  000302  C0CA  F040         	movff	draw@4674,setLed@pos
  1669  000306  C0CB  F041         	movff	draw@4674+1,setLed@pos+1
  1670  00030A  C0D8  F042         	movff	_blink_on,setLed@value
  1671  00030E  EC0C  F004         	call	_setLed	;wreg free
  1672                           
  1673                           ;main.c: 364:                     break;
  1674  000312  0012               	return	
  1675  000314                     l232:
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 367:                     setLed((Position) {
  1679  000314  C08A  F0CC         	movff	draw@F4675,draw@4676
  1680  000318  C08B  F0CD         	movff	draw@F4675+1,draw@4676+1
  1681                           
  1682                           ; BSR set to: 0
  1683  00031C  281B               	incf	_position^0,w,c
  1684  00031E  6FCC               	movwf	draw@4676& (0+255),b
  1685                           
  1686                           ; BSR set to: 0
  1687  000320  C01C  F0CD         	movff	_position+1,draw@4676+1
  1688                           
  1689                           ; BSR set to: 0
  1690  000324  C0CC  F040         	movff	draw@4676,setLed@pos
  1691  000328  C0CD  F041         	movff	draw@4676+1,setLed@pos+1
  1692  00032C  C0D8  F042         	movff	_blink_on,setLed@value
  1693  000330  EC0C  F004         	call	_setLed	;wreg free
  1694                           
  1695                           ; BSR set to: 0
  1696                           
  1697                           ; BSR set to: 0
  1698  000334  C01B  F0CE         	movff	_position,draw@4678
  1699                           
  1700                           ; BSR set to: 0
  1701  000338  281C               	incf	(_position+1)^0,w,c
  1702  00033A  6FCF               	movwf	(draw@4678+1)& (0+255),b
  1703  00033C  C0CE  F040         	movff	draw@4678,setLed@pos
  1704  000340  C0CF  F041         	movff	draw@4678+1,setLed@pos+1
  1705  000344  C0D8  F042         	movff	_blink_on,setLed@value
  1706  000348  EC0C  F004         	call	_setLed	;wreg free
  1707                           
  1708                           ; BSR set to: 0
  1709                           
  1710                           ; BSR set to: 0
  1711  00034C  281B               	incf	_position^0,w,c
  1712  00034E  6FD0               	movwf	draw@4680& (0+255),b
  1713                           
  1714                           ; BSR set to: 0
  1715  000350  281C               	incf	(_position+1)^0,w,c
  1716  000352  6FD1               	movwf	(draw@4680+1)& (0+255),b
  1717  000354  C0D0  F040         	movff	draw@4680,setLed@pos
  1718  000358  C0D1  F041         	movff	draw@4680+1,setLed@pos+1
  1719  00035C  C0D8  F042         	movff	_blink_on,setLed@value
  1720  000360  EC0C  F004         	call	_setLed	;wreg free
  1721                           
  1722                           ;main.c: 378:                     break;
  1723  000364  0012               	return	
  1724  000366                     l233:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;main.c: 381:                     setLed((Position) {
  1728  000366  C084  F0D2         	movff	draw@F4681,draw@4682
  1729  00036A  C085  F0D3         	movff	draw@F4681+1,draw@4682+1
  1730  00036E  C01B  F0D2         	movff	_position,draw@4682
  1731  000372  C01C  F0D3         	movff	_position+1,draw@4682+1
  1732                           
  1733                           ; BSR set to: 0
  1734  000376  C0D2  F040         	movff	draw@4682,setLed@pos
  1735  00037A  C0D3  F041         	movff	draw@4682+1,setLed@pos+1
  1736  00037E  C0D8  F042         	movff	_blink_on,setLed@value
  1737  000382  EC0C  F004         	call	_setLed	;wreg free
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 385:                     setLed((Position) {
  1741  000386  C082  F0D4         	movff	draw@F4683,draw@4684
  1742  00038A  C083  F0D5         	movff	draw@F4683+1,draw@4684+1
  1743                           
  1744                           ; BSR set to: 0
  1745  00038E  C01B  F0D4         	movff	_position,draw@4684
  1746                           
  1747                           ; BSR set to: 0
  1748  000392  281C               	incf	(_position+1)^0,w,c
  1749  000394  6FD5               	movwf	(draw@4684+1)& (0+255),b
  1750                           
  1751                           ; BSR set to: 0
  1752  000396  C0D4  F040         	movff	draw@4684,setLed@pos
  1753  00039A  C0D5  F041         	movff	draw@4684+1,setLed@pos+1
  1754  00039E  C0D8  F042         	movff	_blink_on,setLed@value
  1755  0003A2  EC0C  F004         	call	_setLed	;wreg free
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 389:                     setLed((Position) {
  1759  0003A6  C080  F0D6         	movff	draw@F4685,draw@4686
  1760  0003AA  C081  F0D7         	movff	draw@F4685+1,draw@4686+1
  1761  0003AE  281B               	incf	_position^0,w,c
  1762  0003B0  6FD6               	movwf	draw@4686& (0+255),b
  1763  0003B2  281C               	incf	(_position+1)^0,w,c
  1764  0003B4  6FD7               	movwf	(draw@4686+1)& (0+255),b
  1765                           
  1766                           ; BSR set to: 0
  1767  0003B6  C0D6  F040         	movff	draw@4686,setLed@pos
  1768  0003BA  C0D7  F041         	movff	draw@4686+1,setLed@pos+1
  1769  0003BE  C0D8  F042         	movff	_blink_on,setLed@value
  1770  0003C2  EC0C  F004         	call	_setLed	;wreg free
  1771                           
  1772                           ;main.c: 392:                     break;
  1773  0003C6  0012               	return	
  1774  0003C8                     l2549:
  1775                           
  1776                           ; BSR set to: 0
  1777  0003C8  5022               	movf	_rotation^0,w,c
  1778  0003CA  6FAE               	movwf	??_draw& (0+255),b
  1779  0003CC  6BAF               	clrf	(??_draw+1)& (0+255),b
  1780                           
  1781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1782                           ; Switch size 1, requested type "simple"
  1783                           ; Number of cases is 1, Range of values is 0 to 0
  1784                           ; switch strategies available:
  1785                           ; Name         Instructions Cycles
  1786                           ; simple_byte            4     3 (average)
  1787                           ;	Chosen strategy is simple_byte
  1788  0003CE  51AF               	movf	(??_draw+1)& (0+255),w,b
  1789  0003D0  0A00               	xorlw	0	; case 0
  1790  0003D2  A4D8               	btfss	status,2,c
  1791  0003D4  0012               	return	
  1792                           
  1793                           ; BSR set to: 0
  1794                           ; Switch size 1, requested type "simple"
  1795                           ; Number of cases is 4, Range of values is 0 to 3
  1796                           ; switch strategies available:
  1797                           ; Name         Instructions Cycles
  1798                           ; simple_byte           13     7 (average)
  1799                           ;	Chosen strategy is simple_byte
  1800  0003D6  51AE               	movf	??_draw& (0+255),w,b
  1801  0003D8  0A00               	xorlw	0	; case 0
  1802  0003DA  B4D8               	btfsc	status,2,c
  1803  0003DC  D739               	goto	l229
  1804  0003DE  0A01               	xorlw	1	; case 1
  1805  0003E0  B4D8               	btfsc	status,2,c
  1806  0003E2  D798               	goto	l232
  1807  0003E4  0A03               	xorlw	3	; case 2
  1808  0003E6  B4D8               	btfsc	status,2,c
  1809  0003E8  D7BE               	goto	l233
  1810  0003EA  0A01               	xorlw	1	; case 3
  1811  0003EC  A4D8               	btfss	status,2,c
  1812  0003EE  0012               	return	
  1813  0003F0  D760               	goto	l231
  1814  0003F2                     l2553:
  1815                           
  1816                           ; BSR set to: 0
  1817  0003F2  5021               	movf	_type^0,w,c
  1818  0003F4  6FAE               	movwf	??_draw& (0+255),b
  1819  0003F6  6BAF               	clrf	(??_draw+1)& (0+255),b
  1820                           
  1821                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1822                           ; Switch size 1, requested type "simple"
  1823                           ; Number of cases is 1, Range of values is 0 to 0
  1824                           ; switch strategies available:
  1825                           ; Name         Instructions Cycles
  1826                           ; simple_byte            4     3 (average)
  1827                           ;	Chosen strategy is simple_byte
  1828  0003F8  51AF               	movf	(??_draw+1)& (0+255),w,b
  1829  0003FA  0A00               	xorlw	0	; case 0
  1830  0003FC  A4D8               	btfss	status,2,c
  1831  0003FE  0012               	return	
  1832                           
  1833                           ; BSR set to: 0
  1834                           ; Switch size 1, requested type "simple"
  1835                           ; Number of cases is 3, Range of values is 0 to 2
  1836                           ; switch strategies available:
  1837                           ; Name         Instructions Cycles
  1838                           ; simple_byte           10     6 (average)
  1839                           ;	Chosen strategy is simple_byte
  1840  000400  51AE               	movf	??_draw& (0+255),w,b
  1841  000402  0A00               	xorlw	0	; case 0
  1842  000404  B4D8               	btfsc	status,2,c
  1843  000406  D6D2               	goto	l224
  1844  000408  0A01               	xorlw	1	; case 1
  1845  00040A  B4D8               	btfsc	status,2,c
  1846  00040C  D6E0               	goto	l226
  1847  00040E  0A03               	xorlw	3	; case 2
  1848  000410  A4D8               	btfss	status,2,c
  1849  000412  0012               	return	
  1850  000414  D7D9               	goto	l2549
  1851  000416                     __end_of_draw:
  1852                           	callstack 0
  1853                           
  1854 ;; *************** function _setLed *****************
  1855 ;; Defined at:
  1856 ;;		line 267 in file "main.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;  pos             2   28[COMRAM] struct Position
  1859 ;;  value           1   30[COMRAM] unsigned char 
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  1    wreg      void 
  1864 ;; Registers used:
  1865 ;;		wreg, status,2, status,0
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 3F/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1871 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;Total ram usage:        5 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; Hardware stack levels required when called:    3
  1878 ;; This function calls:
  1879 ;;		Nothing
  1880 ;; This function is called by:
  1881 ;;		_draw
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           	psect	text7
  1886  000818                     __ptext7:
  1887                           	callstack 0
  1888  000818                     _setLed:
  1889                           	callstack 26
  1890                           
  1891                           ;main.c: 268:     switch (pos.x) {
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;incstack = 0
  1895  000818  D080               	goto	l2361
  1896  00081A                     l2335:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 270:             if (value)
  1900  00081A  5042               	movf	setLed@value^0,w,c
  1901  00081C  B4D8               	btfsc	status,2,c
  1902  00081E  D00E               	goto	l2339
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;main.c: 271:                 LATC |= (1 << pos.y);
  1906  000820  C041  F0A3         	movff	setLed@pos+1,??_setLed
  1907  000824  0E01               	movlw	1
  1908  000826  6FA4               	movwf	(??_setLed+1)& (0+255),b
  1909  000828  2BA3               	incf	??_setLed& (0+255),f,b
  1910  00082A  D002               	goto	u1804
  1911  00082C                     u1805:
  1912  00082C  90D8               	bcf	status,0,c
  1913  00082E  37A4               	rlcf	(??_setLed+1)& (0+255),f,b
  1914  000830                     u1804:
  1915  000830  2FA3               	decfsz	??_setLed& (0+255),f,b
  1916  000832  D7FC               	goto	u1805
  1917  000834  0100               	movlb	0	; () banked
  1918  000836  51A4               	movf	(??_setLed+1)& (0+255),w,b
  1919  000838  128B               	iorwf	139,f,c	;volatile
  1920  00083A  0012               	return	
  1921  00083C                     l2339:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;main.c: 273:                 LATC &= ~(1 << pos.y);
  1925  00083C  C041  F0A3         	movff	setLed@pos+1,??_setLed
  1926  000840  0E01               	movlw	1
  1927  000842  6FA4               	movwf	(??_setLed+1)& (0+255),b
  1928  000844  2BA3               	incf	??_setLed& (0+255),f,b
  1929  000846  D002               	goto	u1814
  1930  000848                     u1815:
  1931  000848  90D8               	bcf	status,0,c
  1932  00084A  37A4               	rlcf	(??_setLed+1)& (0+255),f,b
  1933  00084C                     u1814:
  1934  00084C  2FA3               	decfsz	??_setLed& (0+255),f,b
  1935  00084E  D7FC               	goto	u1815
  1936  000850  0100               	movlb	0	; () banked
  1937  000852  51A4               	movf	(??_setLed+1)& (0+255),w,b
  1938  000854  0AFF               	xorlw	255
  1939  000856  168B               	andwf	139,f,c	;volatile
  1940  000858  0012               	return	
  1941  00085A                     l2341:
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;main.c: 276:             if (value)
  1945  00085A  5042               	movf	setLed@value^0,w,c
  1946  00085C  B4D8               	btfsc	status,2,c
  1947  00085E  D00E               	goto	l2345
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;main.c: 277:                 LATD |= (1 << pos.y);
  1951  000860  C041  F0A3         	movff	setLed@pos+1,??_setLed
  1952  000864  0E01               	movlw	1
  1953  000866  6FA4               	movwf	(??_setLed+1)& (0+255),b
  1954  000868  2BA3               	incf	??_setLed& (0+255),f,b
  1955  00086A  D002               	goto	u1834
  1956  00086C                     u1835:
  1957  00086C  90D8               	bcf	status,0,c
  1958  00086E  37A4               	rlcf	(??_setLed+1)& (0+255),f,b
  1959  000870                     u1834:
  1960  000870  2FA3               	decfsz	??_setLed& (0+255),f,b
  1961  000872  D7FC               	goto	u1835
  1962  000874  0100               	movlb	0	; () banked
  1963  000876  51A4               	movf	(??_setLed+1)& (0+255),w,b
  1964  000878  128C               	iorwf	140,f,c	;volatile
  1965  00087A  0012               	return	
  1966  00087C                     l2345:
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;main.c: 279:                 LATD &= ~(1 << pos.y);
  1970  00087C  C041  F0A3         	movff	setLed@pos+1,??_setLed
  1971  000880  0E01               	movlw	1
  1972  000882  6FA4               	movwf	(??_setLed+1)& (0+255),b
  1973  000884  2BA3               	incf	??_setLed& (0+255),f,b
  1974  000886  D002               	goto	u1844
  1975  000888                     u1845:
  1976  000888  90D8               	bcf	status,0,c
  1977  00088A  37A4               	rlcf	(??_setLed+1)& (0+255),f,b
  1978  00088C                     u1844:
  1979  00088C  2FA3               	decfsz	??_setLed& (0+255),f,b
  1980  00088E  D7FC               	goto	u1845
  1981  000890  0100               	movlb	0	; () banked
  1982  000892  51A4               	movf	(??_setLed+1)& (0+255),w,b
  1983  000894  0AFF               	xorlw	255
  1984  000896  168C               	andwf	140,f,c	;volatile
  1985  000898  0012               	return	
  1986  00089A                     l2347:
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;main.c: 282:             if (value)
  1990  00089A  5042               	movf	setLed@value^0,w,c
  1991  00089C  B4D8               	btfsc	status,2,c
  1992  00089E  D00E               	goto	l2351
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;main.c: 283:                 LATE |= (1 << pos.y);
  1996  0008A0  C041  F0A3         	movff	setLed@pos+1,??_setLed
  1997  0008A4  0E01               	movlw	1
  1998  0008A6  6FA4               	movwf	(??_setLed+1)& (0+255),b
  1999  0008A8  2BA3               	incf	??_setLed& (0+255),f,b
  2000  0008AA  D002               	goto	u1864
  2001  0008AC                     u1865:
  2002  0008AC  90D8               	bcf	status,0,c
  2003  0008AE  37A4               	rlcf	(??_setLed+1)& (0+255),f,b
  2004  0008B0                     u1864:
  2005  0008B0  2FA3               	decfsz	??_setLed& (0+255),f,b
  2006  0008B2  D7FC               	goto	u1865
  2007  0008B4  0100               	movlb	0	; () banked
  2008  0008B6  51A4               	movf	(??_setLed+1)& (0+255),w,b
  2009  0008B8  128D               	iorwf	141,f,c	;volatile
  2010  0008BA  0012               	return	
  2011  0008BC                     l2351:
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;main.c: 285:                 LATE &= ~(1 << pos.y);
  2015  0008BC  C041  F0A3         	movff	setLed@pos+1,??_setLed
  2016  0008C0  0E01               	movlw	1
  2017  0008C2  6FA4               	movwf	(??_setLed+1)& (0+255),b
  2018  0008C4  2BA3               	incf	??_setLed& (0+255),f,b
  2019  0008C6  D002               	goto	u1874
  2020  0008C8                     u1875:
  2021  0008C8  90D8               	bcf	status,0,c
  2022  0008CA  37A4               	rlcf	(??_setLed+1)& (0+255),f,b
  2023  0008CC                     u1874:
  2024  0008CC  2FA3               	decfsz	??_setLed& (0+255),f,b
  2025  0008CE  D7FC               	goto	u1875
  2026  0008D0  0100               	movlb	0	; () banked
  2027  0008D2  51A4               	movf	(??_setLed+1)& (0+255),w,b
  2028  0008D4  0AFF               	xorlw	255
  2029  0008D6  168D               	andwf	141,f,c	;volatile
  2030  0008D8  0012               	return	
  2031  0008DA                     l2353:
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;main.c: 288:             if (value)
  2035  0008DA  5042               	movf	setLed@value^0,w,c
  2036  0008DC  B4D8               	btfsc	status,2,c
  2037  0008DE  D00E               	goto	l2357
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;main.c: 289:                 LATF |= (1 << pos.y);
  2041  0008E0  C041  F0A3         	movff	setLed@pos+1,??_setLed
  2042  0008E4  0E01               	movlw	1
  2043  0008E6  6FA4               	movwf	(??_setLed+1)& (0+255),b
  2044  0008E8  2BA3               	incf	??_setLed& (0+255),f,b
  2045  0008EA  D002               	goto	u1894
  2046  0008EC                     u1895:
  2047  0008EC  90D8               	bcf	status,0,c
  2048  0008EE  37A4               	rlcf	(??_setLed+1)& (0+255),f,b
  2049  0008F0                     u1894:
  2050  0008F0  2FA3               	decfsz	??_setLed& (0+255),f,b
  2051  0008F2  D7FC               	goto	u1895
  2052  0008F4  0100               	movlb	0	; () banked
  2053  0008F6  51A4               	movf	(??_setLed+1)& (0+255),w,b
  2054  0008F8  128E               	iorwf	142,f,c	;volatile
  2055  0008FA  0012               	return	
  2056  0008FC                     l2357:
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;main.c: 291:                 LATF &= ~(1 << pos.y);
  2060  0008FC  C041  F0A3         	movff	setLed@pos+1,??_setLed
  2061  000900  0E01               	movlw	1
  2062  000902  6FA4               	movwf	(??_setLed+1)& (0+255),b
  2063  000904  2BA3               	incf	??_setLed& (0+255),f,b
  2064  000906  D002               	goto	u1904
  2065  000908                     u1905:
  2066  000908  90D8               	bcf	status,0,c
  2067  00090A  37A4               	rlcf	(??_setLed+1)& (0+255),f,b
  2068  00090C                     u1904:
  2069  00090C  2FA3               	decfsz	??_setLed& (0+255),f,b
  2070  00090E  D7FC               	goto	u1905
  2071  000910  0100               	movlb	0	; () banked
  2072  000912  51A4               	movf	(??_setLed+1)& (0+255),w,b
  2073  000914  0AFF               	xorlw	255
  2074  000916  168E               	andwf	142,f,c	;volatile
  2075  000918  0012               	return	
  2076  00091A                     l2361:
  2077  00091A  5040               	movf	setLed@pos^0,w,c
  2078  00091C  0100               	movlb	0	; () banked
  2079  00091E  6FA3               	movwf	??_setLed& (0+255),b
  2080  000920  6BA4               	clrf	(??_setLed+1)& (0+255),b
  2081                           
  2082                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2083                           ; Switch size 1, requested type "simple"
  2084                           ; Number of cases is 1, Range of values is 0 to 0
  2085                           ; switch strategies available:
  2086                           ; Name         Instructions Cycles
  2087                           ; simple_byte            4     3 (average)
  2088                           ;	Chosen strategy is simple_byte
  2089  000922  51A4               	movf	(??_setLed+1)& (0+255),w,b
  2090  000924  0A00               	xorlw	0	; case 0
  2091  000926  A4D8               	btfss	status,2,c
  2092  000928  0012               	return	
  2093                           
  2094                           ; BSR set to: 0
  2095                           ; Switch size 1, requested type "simple"
  2096                           ; Number of cases is 4, Range of values is 0 to 3
  2097                           ; switch strategies available:
  2098                           ; Name         Instructions Cycles
  2099                           ; simple_byte           13     7 (average)
  2100                           ;	Chosen strategy is simple_byte
  2101  00092A  51A3               	movf	??_setLed& (0+255),w,b
  2102  00092C  0A00               	xorlw	0	; case 0
  2103  00092E  B4D8               	btfsc	status,2,c
  2104  000930  D774               	goto	l2335
  2105  000932  0A01               	xorlw	1	; case 1
  2106  000934  B4D8               	btfsc	status,2,c
  2107  000936  D791               	goto	l2341
  2108  000938  0A03               	xorlw	3	; case 2
  2109  00093A  B4D8               	btfsc	status,2,c
  2110  00093C  D7AE               	goto	l2347
  2111  00093E  0A01               	xorlw	1	; case 3
  2112  000940  A4D8               	btfss	status,2,c
  2113  000942  0012               	return	
  2114  000944  D7CA               	goto	l2353
  2115  000946                     __end_of_setLed:
  2116                           	callstack 0
  2117                           
  2118 ;; *************** function _move_down *****************
  2119 ;; Defined at:
  2120 ;;		line 504 in file "main.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;		None
  2123 ;; Auto vars:     Size  Location     Type
  2124 ;;  newPosition     2    9[BANK0 ] struct Position
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  1    wreg      void 
  2127 ;; Registers used:
  2128 ;;		wreg, status,2, status,0, cstack
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 3F/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;Total ram usage:        2 bytes
  2139 ;; Hardware stack levels used:    1
  2140 ;; Hardware stack levels required when called:    5
  2141 ;; This function calls:
  2142 ;;		_move
  2143 ;; This function is called by:
  2144 ;;		_draw
  2145 ;;		_poll_g
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text8
  2150  000CEE                     __ptext8:
  2151                           	callstack 0
  2152  000CEE                     _move_down:
  2153                           	callstack 24
  2154                           
  2155                           ;main.c: 505:     Position newPosition = {position.x, position.y + 1};
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;incstack = 0
  2159  000CEE  C00F  F0AC         	movff	move_down@F4758,move_down@newPosition
  2160  000CF2  C010  F0AD         	movff	move_down@F4758+1,move_down@newPosition+1
  2161  000CF6  C01B  F0AC         	movff	_position,move_down@newPosition
  2162  000CFA  281C               	incf	(_position+1)^0,w,c
  2163  000CFC  0100               	movlb	0	; () banked
  2164  000CFE  6FAD               	movwf	(move_down@newPosition+1)& (0+255),b
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;main.c: 506:     move(newPosition);
  2168  000D00  C0AC  F0AA         	movff	move_down@newPosition,move@newPosition
  2169  000D04  C0AD  F0AB         	movff	move_down@newPosition+1,move@newPosition+1
  2170  000D08  EC87  F006         	call	_move	;wreg free
  2171                           
  2172                           ; BSR set to: 0
  2173  000D0C  0012               	return		;funcret
  2174  000D0E                     __end_of_move_down:
  2175                           	callstack 0
  2176                           
  2177 ;; *************** function _move *****************
  2178 ;; Defined at:
  2179 ;;		line 483 in file "main.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;  newPosition     2    7[BANK0 ] struct Position
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 3F/0
  2190 ;;		On exit  : 3F/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2193 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;Total ram usage:        2 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    4
  2200 ;; This function calls:
  2201 ;;		_canMove
  2202 ;; This function is called by:
  2203 ;;		_move_left
  2204 ;;		_move_right
  2205 ;;		_move_up
  2206 ;;		_move_down
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text9
  2211  000D0E                     __ptext9:
  2212                           	callstack 0
  2213  000D0E                     _move:
  2214                           	callstack 24
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 484:     if (canMove(newPosition)) {
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;incstack = 0
  2221  000D0E  C0AA  F040         	movff	move@newPosition,canMove@position
  2222  000D12  C0AB  F041         	movff	move@newPosition+1,canMove@position+1
  2223  000D16  ECA3  F005         	call	_canMove	;wreg free
  2224  000D1A  0900               	iorlw	0
  2225  000D1C  B4D8               	btfsc	status,2,c
  2226  000D1E  0012               	return	
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;main.c: 485:         position = newPosition;
  2230  000D20  C0AA  F01B         	movff	move@newPosition,_position
  2231  000D24  C0AB  F01C         	movff	move@newPosition+1,_position+1
  2232                           
  2233                           ; BSR set to: 0
  2234  000D28  0012               	return		;funcret
  2235  000D2A                     __end_of_move:
  2236                           	callstack 0
  2237                           
  2238 ;; *************** function _canMove *****************
  2239 ;; Defined at:
  2240 ;;		line 461 in file "main.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;  position        2   28[COMRAM] struct Position
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  bot             1    5[BANK0 ] unsigned char 
  2245 ;;  top             1    4[BANK0 ] unsigned char 
  2246 ;;  right           1    3[BANK0 ] unsigned char 
  2247 ;;  left            1    2[BANK0 ] unsigned char 
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  1    wreg      unsigned char 
  2250 ;; Registers used:
  2251 ;;		wreg, status,2, status,0
  2252 ;; Tracked objects:
  2253 ;;		On entry : 3F/0
  2254 ;;		On exit  : 3F/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2257 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;Total ram usage:        9 bytes
  2262 ;; Hardware stack levels used:    1
  2263 ;; Hardware stack levels required when called:    3
  2264 ;; This function calls:
  2265 ;;		Nothing
  2266 ;; This function is called by:
  2267 ;;		_move
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           	psect	text10
  2272  000B46                     __ptext10:
  2273                           	callstack 0
  2274  000B46                     _canMove:
  2275                           	callstack 24
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;main.c: 462:     unsigned char left, right, top, bot;;main.c: 463:     switch (type) {
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;incstack = 0
  2282  000B46  D012               	goto	l2307
  2283  000B48                     l258:
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 465:         {;main.c: 466:             left = right = position.x;
  2287  000B48  C040  F0A6         	movff	canMove@position,canMove@right
  2288  000B4C  C0A6  F0A5         	movff	canMove@right,canMove@left
  2289                           
  2290                           ;main.c: 467:             top = bot = position.y;
  2291  000B50  C041  F0A8         	movff	canMove@position+1,canMove@bot
  2292  000B54  C0A8  F0A7         	movff	canMove@bot,canMove@top
  2293                           
  2294                           ;main.c: 468:             break;
  2295  000B58  D01A               	goto	l2309
  2296  000B5A                     l261:
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;main.c: 472:         {;main.c: 473:             left = position.x;
  2300  000B5A  C040  F0A5         	movff	canMove@position,canMove@left
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;main.c: 474:             right = position.x + 1;
  2304  000B5E  2840               	incf	canMove@position^0,w,c
  2305  000B60  6FA6               	movwf	canMove@right& (0+255),b
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;main.c: 475:             top = position.y;
  2309  000B62  C041  F0A7         	movff	canMove@position+1,canMove@top
  2310                           
  2311                           ;main.c: 476:             bot = position.y + 1;
  2312  000B66  2841               	incf	(canMove@position+1)^0,w,c
  2313  000B68  6FA8               	movwf	canMove@bot& (0+255),b
  2314                           
  2315                           ;main.c: 477:             break;
  2316  000B6A  D011               	goto	l2309
  2317  000B6C                     l2307:
  2318                           
  2319                           ; BSR set to: 0
  2320  000B6C  5021               	movf	_type^0,w,c
  2321  000B6E  6FA3               	movwf	??_canMove& (0+255),b
  2322  000B70  6BA4               	clrf	(??_canMove+1)& (0+255),b
  2323                           
  2324                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2325                           ; Switch size 1, requested type "simple"
  2326                           ; Number of cases is 1, Range of values is 0 to 0
  2327                           ; switch strategies available:
  2328                           ; Name         Instructions Cycles
  2329                           ; simple_byte            4     3 (average)
  2330                           ;	Chosen strategy is simple_byte
  2331  000B72  51A4               	movf	(??_canMove+1)& (0+255),w,b
  2332  000B74  0A00               	xorlw	0	; case 0
  2333  000B76  A4D8               	btfss	status,2,c
  2334  000B78  D00A               	goto	l2309
  2335                           
  2336                           ; BSR set to: 0
  2337                           ; Switch size 1, requested type "simple"
  2338                           ; Number of cases is 3, Range of values is 0 to 2
  2339                           ; switch strategies available:
  2340                           ; Name         Instructions Cycles
  2341                           ; simple_byte           10     6 (average)
  2342                           ;	Chosen strategy is simple_byte
  2343  000B7A  51A3               	movf	??_canMove& (0+255),w,b
  2344  000B7C  0A00               	xorlw	0	; case 0
  2345  000B7E  B4D8               	btfsc	status,2,c
  2346  000B80  D7E3               	goto	l258
  2347  000B82  0A01               	xorlw	1	; case 1
  2348  000B84  B4D8               	btfsc	status,2,c
  2349  000B86  D7E9               	goto	l261
  2350  000B88  0A03               	xorlw	3	; case 2
  2351  000B8A  B4D8               	btfsc	status,2,c
  2352  000B8C  D7E6               	goto	l261
  2353  000B8E                     l2309:
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;main.c: 480:     return (left < 4 && right < 4 && top < 8 && bot < 8);
  2357  000B8E  0E00               	movlw	0
  2358  000B90  6FA9               	movwf	_canMove$479& (0+255),b
  2359                           
  2360                           ; BSR set to: 0
  2361  000B92  0E04               	movlw	4
  2362  000B94  61A5               	cpfslt	canMove@left& (0+255),b
  2363  000B96  D00B               	goto	l263
  2364                           
  2365                           ; BSR set to: 0
  2366  000B98  0E04               	movlw	4
  2367  000B9A  61A6               	cpfslt	canMove@right& (0+255),b
  2368  000B9C  D008               	goto	l263
  2369                           
  2370                           ; BSR set to: 0
  2371  000B9E  0E08               	movlw	8
  2372  000BA0  61A7               	cpfslt	canMove@top& (0+255),b
  2373  000BA2  D005               	goto	l263
  2374                           
  2375                           ; BSR set to: 0
  2376  000BA4  0E08               	movlw	8
  2377  000BA6  61A8               	cpfslt	canMove@bot& (0+255),b
  2378  000BA8  D002               	goto	l263
  2379                           
  2380                           ; BSR set to: 0
  2381  000BAA  0E01               	movlw	1
  2382  000BAC  6FA9               	movwf	_canMove$479& (0+255),b
  2383  000BAE                     l263:
  2384                           
  2385                           ; BSR set to: 0
  2386  000BAE  51A9               	movf	_canMove$479& (0+255),w,b
  2387                           
  2388                           ; BSR set to: 0
  2389  000BB0  0012               	return		;funcret
  2390  000BB2                     __end_of_canMove:
  2391                           	callstack 0
  2392                           
  2393 ;; *************** function _busy_wait *****************
  2394 ;; Defined at:
  2395 ;;		line 113 in file "main.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  i               4    0[BANK0 ] long 
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, status,2, status,0
  2404 ;; Tracked objects:
  2405 ;;		On entry : 3F/0
  2406 ;;		On exit  : 3F/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;Total ram usage:        4 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    3
  2416 ;; This function calls:
  2417 ;;		Nothing
  2418 ;; This function is called by:
  2419 ;;		_main
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text11
  2424  000BF4                     __ptext11:
  2425                           	callstack 0
  2426  000BF4                     _busy_wait:
  2427                           	callstack 27
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;main.c: 114:     for (long int i = 0; i <= 454544; i++);
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;incstack = 0
  2434  000BF4  0E00               	movlw	0
  2435  000BF6  6FA3               	movwf	busy_wait@i& (0+255),b
  2436  000BF8  0E00               	movlw	0
  2437  000BFA  6FA4               	movwf	(busy_wait@i+1)& (0+255),b
  2438  000BFC  0E00               	movlw	0
  2439  000BFE  6FA5               	movwf	(busy_wait@i+2)& (0+255),b
  2440  000C00  0E00               	movlw	0
  2441  000C02  6FA6               	movwf	(busy_wait@i+3)& (0+255),b
  2442  000C04                     l2403:
  2443                           
  2444                           ; BSR set to: 0
  2445  000C04  0E01               	movlw	1
  2446  000C06  27A3               	addwf	busy_wait@i& (0+255),f,b
  2447  000C08  0E00               	movlw	0
  2448  000C0A  23A4               	addwfc	(busy_wait@i+1)& (0+255),f,b
  2449  000C0C  23A5               	addwfc	(busy_wait@i+2)& (0+255),f,b
  2450  000C0E  23A6               	addwfc	(busy_wait@i+3)& (0+255),f,b
  2451  000C10  BFA6               	btfsc	(busy_wait@i+3)& (0+255),7,b
  2452  000C12  D7F8               	goto	l2403
  2453  000C14  51A6               	movf	(busy_wait@i+3)& (0+255),w,b
  2454  000C16  E108               	bnz	u1910
  2455  000C18  0E91               	movlw	145
  2456  000C1A  5DA3               	subwf	busy_wait@i& (0+255),w,b
  2457  000C1C  0EEF               	movlw	239
  2458  000C1E  59A4               	subwfb	(busy_wait@i+1)& (0+255),w,b
  2459  000C20  0E06               	movlw	6
  2460  000C22  59A5               	subwfb	(busy_wait@i+2)& (0+255),w,b
  2461  000C24  A0D8               	btfss	status,0,c
  2462  000C26  D7EE               	goto	l2403
  2463  000C28                     u1910:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;main.c: 115:     INTCON |= (1 << 7);
  2467  000C28  8EF2               	bsf	242,7,c	;volatile
  2468                           
  2469                           ; BSR set to: 0
  2470  000C2A  0012               	return		;funcret
  2471  000C2C                     __end_of_busy_wait:
  2472                           	callstack 0
  2473                           
  2474 ;; *************** function _HandleInterrupt *****************
  2475 ;; Defined at:
  2476 ;;		line 132 in file "main.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;Total ram usage:        4 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    2
  2497 ;; This function calls:
  2498 ;;		_blink
  2499 ;;		_rotate
  2500 ;;		_submit
  2501 ;; This function is called by:
  2502 ;;		Interrupt level 2
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	intcode
  2507  000008                     __pintcode:
  2508                           	callstack 0
  2509  000008                     _HandleInterrupt:
  2510                           	callstack 24
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;incstack = 0
  2514  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2515  00000A  ED6A  F005         	call	int_func,f	;refresh shadow registers
  2516                           
  2517                           	psect	intcode_body
  2518  000AD4                     __pintcode_body:
  2519                           	callstack 24
  2520  000AD4                     int_func:
  2521                           	callstack 24
  2522  000AD4  0006               	pop		; remove dummy address from shadow register refresh
  2523  000AD6  CFD9 F03C          	movff	fsr2l,??_HandleInterrupt
  2524  000ADA  CFDA F03D          	movff	fsr2h,??_HandleInterrupt+1
  2525  000ADE  CFF3 F03E          	movff	prodl,??_HandleInterrupt+2
  2526  000AE2  CFF4 F03F          	movff	prodh,??_HandleInterrupt+3
  2527                           
  2528                           ;main.c: 133:     if (INTCONbits.T0IF)
  2529  000AE6  A4F2               	btfss	242,2,c	;volatile
  2530  000AE8  D00D               	goto	i2l2061
  2531                           
  2532                           ;main.c: 134:     {;main.c: 135:         INTCONbits.T0IF = 0;
  2533  000AEA  94F2               	bcf	242,2,c	;volatile
  2534                           
  2535                           ;main.c: 137:         blink_counter += 1;
  2536  000AEC  4A1D               	infsnz	_blink_counter^0,f,c
  2537  000AEE  2A1E               	incf	(_blink_counter+1)^0,f,c
  2538                           
  2539                           ;main.c: 138:         if (blink_counter == 50) {
  2540  000AF0  0E32               	movlw	50
  2541  000AF2  181D               	xorwf	_blink_counter^0,w,c
  2542  000AF4  101E               	iorwf	(_blink_counter+1)^0,w,c
  2543  000AF6  B4D8               	btfsc	status,2,c
  2544                           
  2545                           ;main.c: 139:             blink();
  2546  000AF8  EC30  F006         	call	_blink	;wreg free
  2547                           
  2548                           ;main.c: 142:         TMR0L = 0xCE;
  2549  000AFC  0ECE               	movlw	206
  2550  000AFE  6ED6               	movwf	214,c	;volatile
  2551                           
  2552                           ;main.c: 143:         TMR0H = 0x3C;
  2553  000B00  0E3C               	movlw	60
  2554  000B02  6ED7               	movwf	215,c	;volatile
  2555  000B04                     i2l2061:
  2556                           
  2557                           ;main.c: 146:     if (INTCONbits.RBIF)
  2558  000B04  A0F2               	btfss	242,0,c	;volatile
  2559  000B06  D015               	goto	i2l109
  2560                           
  2561                           ;main.c: 147:     {;main.c: 148:         INTCONbits.RBIF = 0;
  2562  000B08  90F2               	bcf	242,0,c	;volatile
  2563                           
  2564                           ;main.c: 150:         if (!prev_rotate && PORTBbits.RB5)
  2565  000B0A  501F               	movf	_prev_rotate^0,w,c
  2566  000B0C  B4D8               	btfsc	status,2,c
  2567  000B0E  AA81               	btfss	129,5,c	;volatile
  2568  000B10  D002               	goto	i2l2071
  2569                           
  2570                           ;main.c: 151:             rotate();
  2571  000B12  EC9E  F006         	call	_rotate	;wreg free
  2572  000B16                     i2l2071:
  2573                           
  2574                           ;main.c: 152:         if (!prev_submit && PORTBbits.RB6) {
  2575  000B16  5020               	movf	_prev_submit^0,w,c
  2576  000B18  B4D8               	btfsc	status,2,c
  2577  000B1A  AC81               	btfss	129,6,c	;volatile
  2578  000B1C  D002               	goto	i2l2077
  2579                           
  2580                           ;main.c: 153:             submit();
  2581  000B1E  EC72  F003         	call	_submit	;wreg free
  2582  000B22                     i2l2077:
  2583                           
  2584                           ;main.c: 156:         prev_rotate = PORTBbits.RB5;
  2585  000B22  0E00               	movlw	0
  2586  000B24  BA81               	btfsc	129,5,c	;volatile
  2587  000B26  0E01               	movlw	1
  2588  000B28  6E1F               	movwf	_prev_rotate^0,c
  2589                           
  2590                           ;main.c: 157:         prev_submit = PORTBbits.RB6;
  2591  000B2A  0E00               	movlw	0
  2592  000B2C  BC81               	btfsc	129,6,c	;volatile
  2593  000B2E  0E01               	movlw	1
  2594  000B30  6E20               	movwf	_prev_submit^0,c
  2595  000B32                     i2l109:
  2596  000B32  C03F  FFF4         	movff	??_HandleInterrupt+3,prodh
  2597  000B36  C03E  FFF3         	movff	??_HandleInterrupt+2,prodl
  2598  000B3A  C03D  FFDA         	movff	??_HandleInterrupt+1,fsr2h
  2599  000B3E  C03C  FFD9         	movff	??_HandleInterrupt,fsr2l
  2600  000B42  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2601  000B44  0011               	retfie		f
  2602  000B46                     __end_of_HandleInterrupt:
  2603                           	callstack 0
  2604                           
  2605 ;; *************** function _submit *****************
  2606 ;; Defined at:
  2607 ;;		line 403 in file "main.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;		None
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  4722            2   22[COMRAM] struct Position
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;Total ram usage:        4 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    1
  2628 ;; This function calls:
  2629 ;;		___lwmod
  2630 ;;		_not_intersects
  2631 ;; This function is called by:
  2632 ;;		_HandleInterrupt
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text13
  2637  0006E4                     __ptext13:
  2638                           	callstack 0
  2639  0006E4                     _submit:
  2640                           	callstack 24
  2641                           
  2642                           ;main.c: 456:         position = (Position){0, 0};;main.c: 404:     if (not_intersects()
      +                          ) {
  2643                           
  2644                           ;incstack = 0
  2645  0006E4  EC0B  F002         	call	_not_intersects	;wreg free
  2646  0006E8  0900               	iorlw	0
  2647  0006EA  B4D8               	btfsc	status,2,c
  2648  0006EC  0012               	return	
  2649  0006EE  D06A               	goto	i2l1827
  2650  0006F0                     i2l1809:
  2651                           
  2652                           ;main.c: 407:             {;main.c: 408:                 grid[position.x][position.y] = 
      +                          1;
  2653  0006F0  501B               	movf	_position^0,w,c
  2654  0006F2  0D08               	mullw	8
  2655  0006F4  50F3               	movf	243,w,c
  2656  0006F6  0F60               	addlw	low _grid
  2657  0006F8  D017               	goto	L1
  2658  0006FA                     i2l1811:
  2659                           
  2660                           ;main.c: 412:             {;main.c: 413:                 grid[position.x][position.y] = 
      +                          1;
  2661  0006FA  501B               	movf	_position^0,w,c
  2662  0006FC  0D08               	mullw	8
  2663  0006FE  50F3               	movf	243,w,c
  2664  000700  0F60               	addlw	low _grid
  2665  000702  241C               	addwf	(_position+1)^0,w,c
  2666  000704  6ED9               	movwf	fsr2l,c
  2667  000706  6ADA               	clrf	fsr2h,c
  2668  000708  0E01               	movlw	1
  2669  00070A  6EDF               	movwf	indf2,c
  2670  00070C                     
  2671                           ;main.c: 414:                 grid[position.x + 1][position.y] = 1;
  2672  00070C  501B               	movf	_position^0,w,c
  2673  00070E  0D08               	mullw	8
  2674  000710  50F3               	movf	243,w,c
  2675  000712  0F68               	addlw	low (_grid+8)
  2676  000714  241C               	addwf	(_position+1)^0,w,c
  2677  000716  6ED9               	movwf	fsr2l,c
  2678  000718  6ADA               	clrf	fsr2h,c
  2679  00071A  0E01               	movlw	1
  2680  00071C  6EDF               	movwf	indf2,c
  2681                           
  2682                           ;main.c: 415:                 grid[position.x][position.y + 1] = 1;
  2683  00071E  501B               	movf	_position^0,w,c
  2684  000720  0D08               	mullw	8
  2685  000722  50F3               	movf	243,w,c
  2686  000724  0F61               	addlw	low (_grid+1)
  2687  000726  D013               	goto	L3
  2688  000728                     L1:
  2689  000728  241C               	addwf	(_position+1)^0,w,c
  2690  00072A  6ED9               	movwf	fsr2l,c
  2691  00072C  6ADA               	clrf	fsr2h,c
  2692  00072E  0E01               	movlw	1
  2693  000730  6EDF               	movwf	indf2,c
  2694                           
  2695                           ;main.c: 417:                 break;
  2696  000732  D059               	goto	i2l1829
  2697  000734                     i2l1813:
  2698                           
  2699                           ;main.c: 423:                     {;main.c: 424:                         grid[position.x
      +                          ][position.y] = 1;
  2700  000734  501B               	movf	_position^0,w,c
  2701  000736  0D08               	mullw	8
  2702  000738  50F3               	movf	243,w,c
  2703  00073A  0F60               	addlw	low _grid
  2704  00073C  241C               	addwf	(_position+1)^0,w,c
  2705  00073E  6ED9               	movwf	fsr2l,c
  2706  000740  6ADA               	clrf	fsr2h,c
  2707  000742  0E01               	movlw	1
  2708  000744  6EDF               	movwf	indf2,c
  2709                           
  2710                           ;main.c: 425:                         grid[position.x + 1][position.y] = 1;
  2711  000746  501B               	movf	_position^0,w,c
  2712  000748  0D08               	mullw	8
  2713  00074A  50F3               	movf	243,w,c
  2714  00074C  0F68               	addlw	low (_grid+8)
  2715  00074E                     L3:
  2716  00074E  241C               	addwf	(_position+1)^0,w,c
  2717  000750  6ED9               	movwf	fsr2l,c
  2718  000752  6ADA               	clrf	fsr2h,c
  2719  000754  0E01               	movlw	1
  2720  000756  6EDF               	movwf	indf2,c
  2721                           
  2722                           ;main.c: 433:                         grid[position.x + 1][position.y + 1] = 1;
  2723  000758  501B               	movf	_position^0,w,c
  2724  00075A  0D08               	mullw	8
  2725  00075C  50F3               	movf	243,w,c
  2726  00075E  0F69               	addlw	low (_grid+9)
  2727  000760  D7E3               	goto	L1
  2728  000762                     i2l1817:
  2729                           
  2730                           ;main.c: 437:                     {;main.c: 438:                         grid[position.x
      +                          ][position.y] = 1;
  2731  000762  501B               	movf	_position^0,w,c
  2732  000764  0D08               	mullw	8
  2733  000766  50F3               	movf	243,w,c
  2734  000768  0F60               	addlw	low _grid
  2735  00076A  D7D4               	goto	L5
  2736  00076C                     i2l1819:
  2737                           
  2738                           ;main.c: 444:                     {;main.c: 445:                         grid[position.x
      +                          ][position.y] = 1;
  2739  00076C  501B               	movf	_position^0,w,c
  2740  00076E  0D08               	mullw	8
  2741  000770  50F3               	movf	243,w,c
  2742  000772  0F60               	addlw	low _grid
  2743  000774  241C               	addwf	(_position+1)^0,w,c
  2744  000776  6ED9               	movwf	fsr2l,c
  2745  000778  6ADA               	clrf	fsr2h,c
  2746  00077A  0E01               	movlw	1
  2747  00077C  6EDF               	movwf	indf2,c
  2748                           
  2749                           ;main.c: 446:                         grid[position.x + 1][position.y] = 1;
  2750  00077E  501B               	movf	_position^0,w,c
  2751  000780  0D08               	mullw	8
  2752  000782  50F3               	movf	243,w,c
  2753  000784  0F68               	addlw	low (_grid+8)
  2754  000786  241C               	addwf	(_position+1)^0,w,c
  2755  000788  6ED9               	movwf	fsr2l,c
  2756  00078A  6ADA               	clrf	fsr2h,c
  2757  00078C  0E01               	movlw	1
  2758  00078E  6EDF               	movwf	indf2,c
  2759                           
  2760                           ;main.c: 447:                         grid[position.x][position.y + 1] = 1;
  2761  000790  501B               	movf	_position^0,w,c
  2762  000792  0D08               	mullw	8
  2763  000794  50F3               	movf	243,w,c
  2764  000796  0F61               	addlw	low (_grid+1)
  2765  000798  D7C7               	goto	L1
  2766  00079A                     i2l1823:
  2767  00079A  5022               	movf	_rotation^0,w,c
  2768  00079C  6E38               	movwf	??_submit^0,c
  2769  00079E  6A39               	clrf	(??_submit+1)^0,c
  2770                           
  2771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2772                           ; Switch size 1, requested type "simple"
  2773                           ; Number of cases is 1, Range of values is 0 to 0
  2774                           ; switch strategies available:
  2775                           ; Name         Instructions Cycles
  2776                           ; simple_byte            4     3 (average)
  2777                           ;	Chosen strategy is simple_byte
  2778  0007A0  5039               	movf	(??_submit+1)^0,w,c
  2779  0007A2  0A00               	xorlw	0	; case 0
  2780  0007A4  A4D8               	btfss	status,2,c
  2781  0007A6  D01F               	goto	i2l1829
  2782                           
  2783                           ; Switch size 1, requested type "simple"
  2784                           ; Number of cases is 4, Range of values is 0 to 3
  2785                           ; switch strategies available:
  2786                           ; Name         Instructions Cycles
  2787                           ; simple_byte           13     7 (average)
  2788                           ;	Chosen strategy is simple_byte
  2789  0007A8  5038               	movf	??_submit^0,w,c
  2790  0007AA  0A00               	xorlw	0	; case 0
  2791  0007AC  B4D8               	btfsc	status,2,c
  2792  0007AE  D7C2               	goto	i2l1813
  2793  0007B0  0A01               	xorlw	1	; case 1
  2794  0007B2  B4D8               	btfsc	status,2,c
  2795  0007B4  D7AB               	goto	L6
  2796  0007B6  0A03               	xorlw	3	; case 2
  2797  0007B8  B4D8               	btfsc	status,2,c
  2798  0007BA  D7D3               	goto	i2l1817
  2799  0007BC  0A01               	xorlw	1	; case 3
  2800  0007BE  B4D8               	btfsc	status,2,c
  2801  0007C0  D7D5               	goto	i2l1819
  2802  0007C2  D011               	goto	i2l1829
  2803  0007C4                     i2l1827:
  2804  0007C4  5021               	movf	_type^0,w,c
  2805  0007C6  6E38               	movwf	??_submit^0,c
  2806  0007C8  6A39               	clrf	(??_submit+1)^0,c
  2807                           
  2808                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2809                           ; Switch size 1, requested type "simple"
  2810                           ; Number of cases is 1, Range of values is 0 to 0
  2811                           ; switch strategies available:
  2812                           ; Name         Instructions Cycles
  2813                           ; simple_byte            4     3 (average)
  2814                           ;	Chosen strategy is simple_byte
  2815  0007CA  5039               	movf	(??_submit+1)^0,w,c
  2816  0007CC  0A00               	xorlw	0	; case 0
  2817  0007CE  A4D8               	btfss	status,2,c
  2818  0007D0  D00A               	goto	i2l1829
  2819                           
  2820                           ; Switch size 1, requested type "simple"
  2821                           ; Number of cases is 3, Range of values is 0 to 2
  2822                           ; switch strategies available:
  2823                           ; Name         Instructions Cycles
  2824                           ; simple_byte           10     6 (average)
  2825                           ;	Chosen strategy is simple_byte
  2826  0007D2  5038               	movf	??_submit^0,w,c
  2827  0007D4  0A00               	xorlw	0	; case 0
  2828  0007D6  B4D8               	btfsc	status,2,c
  2829  0007D8  D78B               	goto	i2l1809
  2830  0007DA  0A01               	xorlw	1	; case 1
  2831  0007DC  B4D8               	btfsc	status,2,c
  2832  0007DE  D78D               	goto	i2l1811
  2833  0007E0  0A03               	xorlw	3	; case 2
  2834  0007E2  B4D8               	btfsc	status,2,c
  2835  0007E4  D7DA               	goto	i2l1823
  2836  0007E6                     i2l1829:
  2837                           
  2838                           ;main.c: 455:         type = (type + 1) % 3;
  2839  0007E6  0E01               	movlw	1
  2840  0007E8  2421               	addwf	_type^0,w,c
  2841  0007EA  6E24               	movwf	___lwmod@dividend^0,c
  2842  0007EC  6A25               	clrf	(___lwmod@dividend+1)^0,c
  2843  0007EE  0E00               	movlw	0
  2844  0007F0  2225               	addwfc	(___lwmod@dividend+1)^0,f,c
  2845  0007F2  0E00               	movlw	0
  2846  0007F4  6E27               	movwf	(___lwmod@divisor+1)^0,c
  2847  0007F6  0E03               	movlw	3
  2848  0007F8  6E26               	movwf	___lwmod@divisor^0,c
  2849  0007FA  ECD9  F005         	call	___lwmod	;wreg free
  2850  0007FE  5024               	movf	?___lwmod^0,w,c
  2851  000800  6E21               	movwf	_type^0,c
  2852                           
  2853                           ;main.c: 456:         position = (Position){0, 0};
  2854  000802  C017  F03A         	movff	submit@F4721,submit@4722
  2855  000806  C018  F03B         	movff	submit@F4721+1,submit@4722+1
  2856  00080A  C03A  F01B         	movff	submit@4722,_position
  2857  00080E  C03B  F01C         	movff	submit@4722+1,_position+1
  2858                           
  2859                           ;main.c: 457:         rotation = 0;
  2860  000812  0E00               	movlw	0
  2861  000814  6E22               	movwf	_rotation^0,c
  2862  000816  0012               	return		;funcret
  2863  000818                     __end_of_submit:
  2864                           	callstack 0
  2865                           
  2866 ;; *************** function _not_intersects *****************
  2867 ;; Defined at:
  2868 ;;		line 212 in file "main.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  intersects      1   19[COMRAM] unsigned char 
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      unsigned char 
  2875 ;; Registers used:
  2876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;Total ram usage:       20 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; This function calls:
  2889 ;;		Nothing
  2890 ;; This function is called by:
  2891 ;;		_submit
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text14
  2896  000416                     __ptext14:
  2897                           	callstack 0
  2898  000416                     _not_intersects:
  2899                           	callstack 24
  2900                           
  2901                           ;main.c: 213:     unsigned char intersects = 0;
  2902                           
  2903                           ;incstack = 0
  2904  000416  0E00               	movlw	0
  2905  000418  6E37               	movwf	not_intersects@intersects^0,c
  2906                           
  2907                           ;main.c: 214:     switch (type) {
  2908  00041A  D14C               	goto	i2l1707
  2909  00041C                     i2l1587:
  2910                           
  2911                           ;main.c: 216:         {;main.c: 217:             intersects = intersects || grid[positio
      +                          n.x][position.y];
  2912  00041C  0E01               	movlw	1
  2913  00041E  6E26               	movwf	_not_intersects$336^0,c
  2914  000420  501B               	movf	_position^0,w,c
  2915  000422  0D08               	mullw	8
  2916  000424  50F3               	movf	243,w,c
  2917  000426  0F60               	addlw	low _grid
  2918  000428  241C               	addwf	(_position+1)^0,w,c
  2919  00042A  6ED9               	movwf	fsr2l,c
  2920  00042C  6ADA               	clrf	fsr2h,c
  2921  00042E  50DF               	movf	indf2,w,c
  2922  000430  A4D8               	btfss	status,2,c
  2923  000432  D002               	goto	i2l1593
  2924  000434  0E00               	movlw	0
  2925  000436  6E26               	movwf	_not_intersects$336^0,c
  2926  000438                     i2l1593:
  2927  000438  C026  F037         	movff	_not_intersects$336,not_intersects@intersects
  2928                           
  2929                           ;main.c: 218:             break;
  2930  00043C  D14C               	goto	i2l1709
  2931  00043E                     i2l1595:
  2932                           
  2933                           ;main.c: 221:         {;main.c: 222:             intersects = intersects || grid[positio
      +                          n.x][position.y];
  2934  00043E  0E01               	movlw	1
  2935  000440  6E27               	movwf	_not_intersects$337^0,c
  2936  000442  501B               	movf	_position^0,w,c
  2937  000444  0D08               	mullw	8
  2938  000446  50F3               	movf	243,w,c
  2939  000448  0F60               	addlw	low _grid
  2940  00044A  241C               	addwf	(_position+1)^0,w,c
  2941  00044C  6ED9               	movwf	fsr2l,c
  2942  00044E  6ADA               	clrf	fsr2h,c
  2943  000450  50DF               	movf	indf2,w,c
  2944  000452  A4D8               	btfss	status,2,c
  2945  000454  D002               	goto	i2l1601
  2946  000456  0E00               	movlw	0
  2947  000458  6E27               	movwf	_not_intersects$337^0,c
  2948  00045A                     i2l1601:
  2949  00045A  C027  F037         	movff	_not_intersects$337,not_intersects@intersects
  2950                           
  2951                           ;main.c: 223:             intersects = intersects || grid[position.x + 1][position.y];
  2952  00045E  0E01               	movlw	1
  2953  000460  6E28               	movwf	_not_intersects$338^0,c
  2954  000462  5037               	movf	not_intersects@intersects^0,w,c
  2955  000464  A4D8               	btfss	status,2,c
  2956  000466  D00C               	goto	i2l1607
  2957  000468  501B               	movf	_position^0,w,c
  2958  00046A  0D08               	mullw	8
  2959  00046C  50F3               	movf	243,w,c
  2960  00046E  0F68               	addlw	low (_grid+8)
  2961  000470  241C               	addwf	(_position+1)^0,w,c
  2962  000472  6ED9               	movwf	fsr2l,c
  2963  000474  6ADA               	clrf	fsr2h,c
  2964  000476  50DF               	movf	indf2,w,c
  2965  000478  A4D8               	btfss	status,2,c
  2966  00047A  D002               	goto	i2l1607
  2967  00047C  0E00               	movlw	0
  2968  00047E  6E28               	movwf	_not_intersects$338^0,c
  2969  000480                     i2l1607:
  2970  000480  C028  F037         	movff	_not_intersects$338,not_intersects@intersects
  2971                           
  2972                           ;main.c: 224:             intersects = intersects || grid[position.x][position.y + 1];
  2973  000484  0E01               	movlw	1
  2974  000486  6E29               	movwf	_not_intersects$339^0,c
  2975  000488  5037               	movf	not_intersects@intersects^0,w,c
  2976  00048A  A4D8               	btfss	status,2,c
  2977  00048C  D00C               	goto	i2l1613
  2978  00048E  501B               	movf	_position^0,w,c
  2979  000490  0D08               	mullw	8
  2980  000492  50F3               	movf	243,w,c
  2981  000494  0F61               	addlw	low (_grid+1)
  2982  000496  241C               	addwf	(_position+1)^0,w,c
  2983  000498  6ED9               	movwf	fsr2l,c
  2984  00049A  6ADA               	clrf	fsr2h,c
  2985  00049C  50DF               	movf	indf2,w,c
  2986  00049E  A4D8               	btfss	status,2,c
  2987  0004A0  D002               	goto	i2l1613
  2988  0004A2  0E00               	movlw	0
  2989  0004A4  6E29               	movwf	_not_intersects$339^0,c
  2990  0004A6                     i2l1613:
  2991  0004A6  C029  F037         	movff	_not_intersects$339,not_intersects@intersects
  2992                           
  2993                           ;main.c: 225:             intersects = intersects || grid[position.x + 1][position.y + 1
      +                          ];
  2994  0004AA  0E01               	movlw	1
  2995  0004AC  6E2A               	movwf	_not_intersects$340^0,c
  2996  0004AE  5037               	movf	not_intersects@intersects^0,w,c
  2997  0004B0  A4D8               	btfss	status,2,c
  2998  0004B2  D00C               	goto	i2l1619
  2999  0004B4  501B               	movf	_position^0,w,c
  3000  0004B6  0D08               	mullw	8
  3001  0004B8  50F3               	movf	243,w,c
  3002  0004BA  0F69               	addlw	low (_grid+9)
  3003  0004BC  241C               	addwf	(_position+1)^0,w,c
  3004  0004BE  6ED9               	movwf	fsr2l,c
  3005  0004C0  6ADA               	clrf	fsr2h,c
  3006  0004C2  50DF               	movf	indf2,w,c
  3007  0004C4  A4D8               	btfss	status,2,c
  3008  0004C6  D002               	goto	i2l1619
  3009  0004C8  0E00               	movlw	0
  3010  0004CA  6E2A               	movwf	_not_intersects$340^0,c
  3011  0004CC                     i2l1619:
  3012  0004CC  C02A  F037         	movff	_not_intersects$340,not_intersects@intersects
  3013                           
  3014                           ;main.c: 226:             break;
  3015  0004D0  D102               	goto	i2l1709
  3016  0004D2                     i2l1621:
  3017                           
  3018                           ;main.c: 232:                 {;main.c: 233:                     intersects = intersects
      +                           || grid[position.x][position.y];
  3019  0004D2  0E01               	movlw	1
  3020  0004D4  6E2B               	movwf	_not_intersects$341^0,c
  3021  0004D6  501B               	movf	_position^0,w,c
  3022  0004D8  0D08               	mullw	8
  3023  0004DA  50F3               	movf	243,w,c
  3024  0004DC  0F60               	addlw	low _grid
  3025  0004DE  241C               	addwf	(_position+1)^0,w,c
  3026  0004E0  6ED9               	movwf	fsr2l,c
  3027  0004E2  6ADA               	clrf	fsr2h,c
  3028  0004E4  50DF               	movf	indf2,w,c
  3029  0004E6  A4D8               	btfss	status,2,c
  3030  0004E8  D002               	goto	i2l1627
  3031  0004EA  0E00               	movlw	0
  3032  0004EC  6E2B               	movwf	_not_intersects$341^0,c
  3033  0004EE                     i2l1627:
  3034  0004EE  C02B  F037         	movff	_not_intersects$341,not_intersects@intersects
  3035                           
  3036                           ;main.c: 234:                     intersects = intersects || grid[position.x + 1][positi
      +                          on.y];
  3037  0004F2  0E01               	movlw	1
  3038  0004F4  6E2C               	movwf	_not_intersects$342^0,c
  3039  0004F6  5037               	movf	not_intersects@intersects^0,w,c
  3040  0004F8  A4D8               	btfss	status,2,c
  3041  0004FA  D00C               	goto	i2l1633
  3042  0004FC  501B               	movf	_position^0,w,c
  3043  0004FE  0D08               	mullw	8
  3044  000500  50F3               	movf	243,w,c
  3045  000502  0F68               	addlw	low (_grid+8)
  3046  000504  241C               	addwf	(_position+1)^0,w,c
  3047  000506  6ED9               	movwf	fsr2l,c
  3048  000508  6ADA               	clrf	fsr2h,c
  3049  00050A  50DF               	movf	indf2,w,c
  3050  00050C  A4D8               	btfss	status,2,c
  3051  00050E  D002               	goto	i2l1633
  3052  000510  0E00               	movlw	0
  3053  000512  6E2C               	movwf	_not_intersects$342^0,c
  3054  000514                     i2l1633:
  3055  000514  C02C  F037         	movff	_not_intersects$342,not_intersects@intersects
  3056                           
  3057                           ;main.c: 235:                     intersects = intersects || grid[position.x + 1][positi
      +                          on.y + 1];
  3058  000518  0E01               	movlw	1
  3059  00051A  6E2D               	movwf	_not_intersects$343^0,c
  3060  00051C  5037               	movf	not_intersects@intersects^0,w,c
  3061  00051E  A4D8               	btfss	status,2,c
  3062  000520  D00C               	goto	i2l1639
  3063  000522  501B               	movf	_position^0,w,c
  3064  000524  0D08               	mullw	8
  3065  000526  50F3               	movf	243,w,c
  3066  000528  0F69               	addlw	low (_grid+9)
  3067  00052A  241C               	addwf	(_position+1)^0,w,c
  3068  00052C  6ED9               	movwf	fsr2l,c
  3069  00052E  6ADA               	clrf	fsr2h,c
  3070  000530  50DF               	movf	indf2,w,c
  3071  000532  A4D8               	btfss	status,2,c
  3072  000534  D002               	goto	i2l1639
  3073  000536  0E00               	movlw	0
  3074  000538  6E2D               	movwf	_not_intersects$343^0,c
  3075  00053A                     i2l1639:
  3076  00053A  C02D  F037         	movff	_not_intersects$343,not_intersects@intersects
  3077                           
  3078                           ;main.c: 236:                     break;
  3079  00053E  D0CB               	goto	i2l1709
  3080  000540                     i2l1641:
  3081                           
  3082                           ;main.c: 239:                 {;main.c: 240:                     intersects = intersects
      +                           || grid[position.x + 1][position.y];
  3083  000540  0E01               	movlw	1
  3084  000542  6E2E               	movwf	_not_intersects$344^0,c
  3085  000544  501B               	movf	_position^0,w,c
  3086  000546  0D08               	mullw	8
  3087  000548  50F3               	movf	243,w,c
  3088  00054A  0F68               	addlw	low (_grid+8)
  3089  00054C  241C               	addwf	(_position+1)^0,w,c
  3090  00054E  6ED9               	movwf	fsr2l,c
  3091  000550  6ADA               	clrf	fsr2h,c
  3092  000552  50DF               	movf	indf2,w,c
  3093  000554  A4D8               	btfss	status,2,c
  3094  000556  D002               	goto	i2l1647
  3095  000558  0E00               	movlw	0
  3096  00055A  6E2E               	movwf	_not_intersects$344^0,c
  3097  00055C                     i2l1647:
  3098  00055C  C02E  F037         	movff	_not_intersects$344,not_intersects@intersects
  3099                           
  3100                           ;main.c: 241:                     intersects = intersects || grid[position.x][position.y
      +                           + 1];
  3101  000560  0E01               	movlw	1
  3102  000562  6E2F               	movwf	_not_intersects$345^0,c
  3103  000564  5037               	movf	not_intersects@intersects^0,w,c
  3104  000566  A4D8               	btfss	status,2,c
  3105  000568  D00C               	goto	i2l1653
  3106  00056A  501B               	movf	_position^0,w,c
  3107  00056C  0D08               	mullw	8
  3108  00056E  50F3               	movf	243,w,c
  3109  000570  0F61               	addlw	low (_grid+1)
  3110  000572  241C               	addwf	(_position+1)^0,w,c
  3111  000574  6ED9               	movwf	fsr2l,c
  3112  000576  6ADA               	clrf	fsr2h,c
  3113  000578  50DF               	movf	indf2,w,c
  3114  00057A  A4D8               	btfss	status,2,c
  3115  00057C  D002               	goto	i2l1653
  3116  00057E  0E00               	movlw	0
  3117  000580  6E2F               	movwf	_not_intersects$345^0,c
  3118  000582                     i2l1653:
  3119  000582  C02F  F037         	movff	_not_intersects$345,not_intersects@intersects
  3120                           
  3121                           ;main.c: 242:                     intersects = intersects || grid[position.x + 1][positi
      +                          on.y + 1];
  3122  000586  0E01               	movlw	1
  3123  000588  6E30               	movwf	_not_intersects$346^0,c
  3124  00058A  5037               	movf	not_intersects@intersects^0,w,c
  3125  00058C  A4D8               	btfss	status,2,c
  3126  00058E  D00C               	goto	i2l1659
  3127  000590  501B               	movf	_position^0,w,c
  3128  000592  0D08               	mullw	8
  3129  000594  50F3               	movf	243,w,c
  3130  000596  0F69               	addlw	low (_grid+9)
  3131  000598  241C               	addwf	(_position+1)^0,w,c
  3132  00059A  6ED9               	movwf	fsr2l,c
  3133  00059C  6ADA               	clrf	fsr2h,c
  3134  00059E  50DF               	movf	indf2,w,c
  3135  0005A0  A4D8               	btfss	status,2,c
  3136  0005A2  D002               	goto	i2l1659
  3137  0005A4  0E00               	movlw	0
  3138  0005A6  6E30               	movwf	_not_intersects$346^0,c
  3139  0005A8                     i2l1659:
  3140  0005A8  C030  F037         	movff	_not_intersects$346,not_intersects@intersects
  3141                           
  3142                           ;main.c: 243:                     break;
  3143  0005AC  D094               	goto	i2l1709
  3144  0005AE                     i2l1661:
  3145                           
  3146                           ;main.c: 246:                 {;main.c: 247:                     intersects = intersects
      +                           || grid[position.x][position.y];
  3147  0005AE  0E01               	movlw	1
  3148  0005B0  6E31               	movwf	_not_intersects$347^0,c
  3149  0005B2  501B               	movf	_position^0,w,c
  3150  0005B4  0D08               	mullw	8
  3151  0005B6  50F3               	movf	243,w,c
  3152  0005B8  0F60               	addlw	low _grid
  3153  0005BA  241C               	addwf	(_position+1)^0,w,c
  3154  0005BC  6ED9               	movwf	fsr2l,c
  3155  0005BE  6ADA               	clrf	fsr2h,c
  3156  0005C0  50DF               	movf	indf2,w,c
  3157  0005C2  A4D8               	btfss	status,2,c
  3158  0005C4  D002               	goto	i2l1667
  3159  0005C6  0E00               	movlw	0
  3160  0005C8  6E31               	movwf	_not_intersects$347^0,c
  3161  0005CA                     i2l1667:
  3162  0005CA  C031  F037         	movff	_not_intersects$347,not_intersects@intersects
  3163                           
  3164                           ;main.c: 248:                     intersects = intersects || grid[position.x][position.y
      +                           + 1];
  3165  0005CE  0E01               	movlw	1
  3166  0005D0  6E32               	movwf	_not_intersects$348^0,c
  3167  0005D2  5037               	movf	not_intersects@intersects^0,w,c
  3168  0005D4  A4D8               	btfss	status,2,c
  3169  0005D6  D00C               	goto	i2l1673
  3170  0005D8  501B               	movf	_position^0,w,c
  3171  0005DA  0D08               	mullw	8
  3172  0005DC  50F3               	movf	243,w,c
  3173  0005DE  0F61               	addlw	low (_grid+1)
  3174  0005E0  241C               	addwf	(_position+1)^0,w,c
  3175  0005E2  6ED9               	movwf	fsr2l,c
  3176  0005E4  6ADA               	clrf	fsr2h,c
  3177  0005E6  50DF               	movf	indf2,w,c
  3178  0005E8  A4D8               	btfss	status,2,c
  3179  0005EA  D002               	goto	i2l1673
  3180  0005EC  0E00               	movlw	0
  3181  0005EE  6E32               	movwf	_not_intersects$348^0,c
  3182  0005F0                     i2l1673:
  3183  0005F0  C032  F037         	movff	_not_intersects$348,not_intersects@intersects
  3184                           
  3185                           ;main.c: 249:                     intersects = intersects || grid[position.x + 1][positi
      +                          on.y + 1];
  3186  0005F4  0E01               	movlw	1
  3187  0005F6  6E33               	movwf	_not_intersects$349^0,c
  3188  0005F8  5037               	movf	not_intersects@intersects^0,w,c
  3189  0005FA  A4D8               	btfss	status,2,c
  3190  0005FC  D00C               	goto	i2l1679
  3191  0005FE  501B               	movf	_position^0,w,c
  3192  000600  0D08               	mullw	8
  3193  000602  50F3               	movf	243,w,c
  3194  000604  0F69               	addlw	low (_grid+9)
  3195  000606  241C               	addwf	(_position+1)^0,w,c
  3196  000608  6ED9               	movwf	fsr2l,c
  3197  00060A  6ADA               	clrf	fsr2h,c
  3198  00060C  50DF               	movf	indf2,w,c
  3199  00060E  A4D8               	btfss	status,2,c
  3200  000610  D002               	goto	i2l1679
  3201  000612  0E00               	movlw	0
  3202  000614  6E33               	movwf	_not_intersects$349^0,c
  3203  000616                     i2l1679:
  3204  000616  C033  F037         	movff	_not_intersects$349,not_intersects@intersects
  3205                           
  3206                           ;main.c: 250:                     break;
  3207  00061A  D05D               	goto	i2l1709
  3208  00061C                     i2l1681:
  3209                           
  3210                           ;main.c: 253:                 {;main.c: 254:                     intersects = intersects
      +                           || grid[position.x][position.y];
  3211  00061C  0E01               	movlw	1
  3212  00061E  6E34               	movwf	_not_intersects$350^0,c
  3213  000620  501B               	movf	_position^0,w,c
  3214  000622  0D08               	mullw	8
  3215  000624  50F3               	movf	243,w,c
  3216  000626  0F60               	addlw	low _grid
  3217  000628  241C               	addwf	(_position+1)^0,w,c
  3218  00062A  6ED9               	movwf	fsr2l,c
  3219  00062C  6ADA               	clrf	fsr2h,c
  3220  00062E  50DF               	movf	indf2,w,c
  3221  000630  A4D8               	btfss	status,2,c
  3222  000632  D002               	goto	i2l1687
  3223  000634  0E00               	movlw	0
  3224  000636  6E34               	movwf	_not_intersects$350^0,c
  3225  000638                     i2l1687:
  3226  000638  C034  F037         	movff	_not_intersects$350,not_intersects@intersects
  3227                           
  3228                           ;main.c: 255:                     intersects = intersects || grid[position.x + 1][positi
      +                          on.y];
  3229  00063C  0E01               	movlw	1
  3230  00063E  6E35               	movwf	_not_intersects$351^0,c
  3231  000640  5037               	movf	not_intersects@intersects^0,w,c
  3232  000642  A4D8               	btfss	status,2,c
  3233  000644  D00C               	goto	i2l1693
  3234  000646  501B               	movf	_position^0,w,c
  3235  000648  0D08               	mullw	8
  3236  00064A  50F3               	movf	243,w,c
  3237  00064C  0F68               	addlw	low (_grid+8)
  3238  00064E  241C               	addwf	(_position+1)^0,w,c
  3239  000650  6ED9               	movwf	fsr2l,c
  3240  000652  6ADA               	clrf	fsr2h,c
  3241  000654  50DF               	movf	indf2,w,c
  3242  000656  A4D8               	btfss	status,2,c
  3243  000658  D002               	goto	i2l1693
  3244  00065A  0E00               	movlw	0
  3245  00065C  6E35               	movwf	_not_intersects$351^0,c
  3246  00065E                     i2l1693:
  3247  00065E  C035  F037         	movff	_not_intersects$351,not_intersects@intersects
  3248                           
  3249                           ;main.c: 256:                     intersects = intersects || grid[position.x][position.y
      +                           + 1];
  3250  000662  0E01               	movlw	1
  3251  000664  6E36               	movwf	_not_intersects$352^0,c
  3252  000666  5037               	movf	not_intersects@intersects^0,w,c
  3253  000668  A4D8               	btfss	status,2,c
  3254  00066A  D00C               	goto	i2l1699
  3255  00066C  501B               	movf	_position^0,w,c
  3256  00066E  0D08               	mullw	8
  3257  000670  50F3               	movf	243,w,c
  3258  000672  0F61               	addlw	low (_grid+1)
  3259  000674  241C               	addwf	(_position+1)^0,w,c
  3260  000676  6ED9               	movwf	fsr2l,c
  3261  000678  6ADA               	clrf	fsr2h,c
  3262  00067A  50DF               	movf	indf2,w,c
  3263  00067C  A4D8               	btfss	status,2,c
  3264  00067E  D002               	goto	i2l1699
  3265  000680  0E00               	movlw	0
  3266  000682  6E36               	movwf	_not_intersects$352^0,c
  3267  000684                     i2l1699:
  3268  000684  C036  F037         	movff	_not_intersects$352,not_intersects@intersects
  3269                           
  3270                           ;main.c: 257:                     break;
  3271  000688  D026               	goto	i2l1709
  3272  00068A                     i2l1703:
  3273  00068A  5022               	movf	_rotation^0,w,c
  3274  00068C  6E24               	movwf	??_not_intersects^0,c
  3275  00068E  6A25               	clrf	(??_not_intersects+1)^0,c
  3276                           
  3277                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3278                           ; Switch size 1, requested type "simple"
  3279                           ; Number of cases is 1, Range of values is 0 to 0
  3280                           ; switch strategies available:
  3281                           ; Name         Instructions Cycles
  3282                           ; simple_byte            4     3 (average)
  3283                           ;	Chosen strategy is simple_byte
  3284  000690  5025               	movf	(??_not_intersects+1)^0,w,c
  3285  000692  0A00               	xorlw	0	; case 0
  3286  000694  A4D8               	btfss	status,2,c
  3287  000696  D01F               	goto	i2l1709
  3288                           
  3289                           ; Switch size 1, requested type "simple"
  3290                           ; Number of cases is 4, Range of values is 0 to 3
  3291                           ; switch strategies available:
  3292                           ; Name         Instructions Cycles
  3293                           ; simple_byte           13     7 (average)
  3294                           ;	Chosen strategy is simple_byte
  3295  000698  5024               	movf	??_not_intersects^0,w,c
  3296  00069A  0A00               	xorlw	0	; case 0
  3297  00069C  B4D8               	btfsc	status,2,c
  3298  00069E  D719               	goto	i2l1621
  3299  0006A0  0A01               	xorlw	1	; case 1
  3300  0006A2  B4D8               	btfsc	status,2,c
  3301  0006A4  D74D               	goto	i2l1641
  3302  0006A6  0A03               	xorlw	3	; case 2
  3303  0006A8  B4D8               	btfsc	status,2,c
  3304  0006AA  D781               	goto	i2l1661
  3305  0006AC  0A01               	xorlw	1	; case 3
  3306  0006AE  B4D8               	btfsc	status,2,c
  3307  0006B0  D7B5               	goto	i2l1681
  3308  0006B2  D011               	goto	i2l1709
  3309  0006B4                     i2l1707:
  3310  0006B4  5021               	movf	_type^0,w,c
  3311  0006B6  6E24               	movwf	??_not_intersects^0,c
  3312  0006B8  6A25               	clrf	(??_not_intersects+1)^0,c
  3313                           
  3314                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3315                           ; Switch size 1, requested type "simple"
  3316                           ; Number of cases is 1, Range of values is 0 to 0
  3317                           ; switch strategies available:
  3318                           ; Name         Instructions Cycles
  3319                           ; simple_byte            4     3 (average)
  3320                           ;	Chosen strategy is simple_byte
  3321  0006BA  5025               	movf	(??_not_intersects+1)^0,w,c
  3322  0006BC  0A00               	xorlw	0	; case 0
  3323  0006BE  A4D8               	btfss	status,2,c
  3324  0006C0  D00A               	goto	i2l1709
  3325                           
  3326                           ; Switch size 1, requested type "simple"
  3327                           ; Number of cases is 3, Range of values is 0 to 2
  3328                           ; switch strategies available:
  3329                           ; Name         Instructions Cycles
  3330                           ; simple_byte           10     6 (average)
  3331                           ;	Chosen strategy is simple_byte
  3332  0006C2  5024               	movf	??_not_intersects^0,w,c
  3333  0006C4  0A00               	xorlw	0	; case 0
  3334  0006C6  B4D8               	btfsc	status,2,c
  3335  0006C8  D6A9               	goto	i2l1587
  3336  0006CA  0A01               	xorlw	1	; case 1
  3337  0006CC  B4D8               	btfsc	status,2,c
  3338  0006CE  D6B7               	goto	i2l1595
  3339  0006D0  0A03               	xorlw	3	; case 2
  3340  0006D2  B4D8               	btfsc	status,2,c
  3341  0006D4  D7DA               	goto	i2l1703
  3342  0006D6                     i2l1709:
  3343                           
  3344                           ;main.c: 264:     return !intersects;
  3345  0006D6  5037               	movf	not_intersects@intersects^0,w,c
  3346  0006D8  A4D8               	btfss	status,2,c
  3347  0006DA  D002               	goto	i2u121_40
  3348  0006DC  0E01               	movlw	1
  3349  0006DE  0012               	return	
  3350  0006E0                     i2u121_40:
  3351  0006E0  0E00               	movlw	0
  3352  0006E2  0012               	return		;funcret
  3353  0006E4                     __end_of_not_intersects:
  3354                           	callstack 0
  3355                           
  3356 ;; *************** function ___lwmod *****************
  3357 ;; Defined at:
  3358 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/lwmod.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  dividend        2    0[COMRAM] unsigned int 
  3361 ;;  divisor         2    2[COMRAM] unsigned int 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  counter         1    4[COMRAM] unsigned char 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  2    0[COMRAM] unsigned int 
  3366 ;; Registers used:
  3367 ;;		wreg, status,2, status,0
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3373 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;Total ram usage:        5 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; This function calls:
  3380 ;;		Nothing
  3381 ;; This function is called by:
  3382 ;;		_submit
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text15
  3387  000BB2                     __ptext15:
  3388                           	callstack 0
  3389  000BB2                     ___lwmod:
  3390                           	callstack 24
  3391                           
  3392                           ;incstack = 0
  3393  000BB2  5026               	movf	___lwmod@divisor^0,w,c
  3394  000BB4  1027               	iorwf	(___lwmod@divisor+1)^0,w,c
  3395  000BB6  B4D8               	btfsc	status,2,c
  3396  000BB8  D018               	goto	i2l809
  3397  000BBA  0E01               	movlw	1
  3398  000BBC  6E28               	movwf	___lwmod@counter^0,c
  3399  000BBE  D004               	goto	i2l1789
  3400  000BC0                     i2l1787:
  3401  000BC0  90D8               	bcf	status,0,c
  3402  000BC2  3626               	rlcf	___lwmod@divisor^0,f,c
  3403  000BC4  3627               	rlcf	(___lwmod@divisor+1)^0,f,c
  3404  000BC6  2A28               	incf	___lwmod@counter^0,f,c
  3405  000BC8                     i2l1789:
  3406  000BC8  AE27               	btfss	(___lwmod@divisor+1)^0,7,c
  3407  000BCA  D7FA               	goto	i2l1787
  3408  000BCC                     i2u136_40:
  3409  000BCC  5026               	movf	___lwmod@divisor^0,w,c
  3410  000BCE  5C24               	subwf	___lwmod@dividend^0,w,c
  3411  000BD0  5027               	movf	(___lwmod@divisor+1)^0,w,c
  3412  000BD2  5825               	subwfb	(___lwmod@dividend+1)^0,w,c
  3413  000BD4  A0D8               	btfss	status,0,c
  3414  000BD6  D004               	goto	i2l1795
  3415  000BD8  5026               	movf	___lwmod@divisor^0,w,c
  3416  000BDA  5E24               	subwf	___lwmod@dividend^0,f,c
  3417  000BDC  5027               	movf	(___lwmod@divisor+1)^0,w,c
  3418  000BDE  5A25               	subwfb	(___lwmod@dividend+1)^0,f,c
  3419  000BE0                     i2l1795:
  3420  000BE0  90D8               	bcf	status,0,c
  3421  000BE2  3227               	rrcf	(___lwmod@divisor+1)^0,f,c
  3422  000BE4  3226               	rrcf	___lwmod@divisor^0,f,c
  3423  000BE6  2E28               	decfsz	___lwmod@counter^0,f,c
  3424  000BE8  D7F1               	goto	i2u136_40
  3425  000BEA                     i2l809:
  3426  000BEA  C024  F024         	movff	___lwmod@dividend,?___lwmod
  3427  000BEE  C025  F025         	movff	___lwmod@dividend+1,?___lwmod+1
  3428  000BF2  0012               	return		;funcret
  3429  000BF4                     __end_of___lwmod:
  3430                           	callstack 0
  3431                           
  3432 ;; *************** function _rotate *****************
  3433 ;; Defined at:
  3434 ;;		line 399 in file "main.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_HandleInterrupt
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text16
  3462  000D3C                     __ptext16:
  3463                           	callstack 0
  3464  000D3C                     _rotate:
  3465                           	callstack 25
  3466                           
  3467                           ;main.c: 400:     rotation = (rotation + 1) % 4;
  3468                           
  3469                           ;incstack = 0
  3470  000D3C  2822               	incf	_rotation^0,w,c
  3471  000D3E  0B03               	andlw	3
  3472  000D40  6E22               	movwf	_rotation^0,c
  3473  000D42  0012               	return		;funcret
  3474  000D44                     __end_of_rotate:
  3475                           	callstack 0
  3476                           
  3477 ;; *************** function _blink *****************
  3478 ;; Defined at:
  3479 ;;		line 119 in file "main.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;		None
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 3F/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;Total ram usage:        0 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_HandleInterrupt
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text17
  3507  000C60                     __ptext17:
  3508                           	callstack 0
  3509  000C60                     _blink:
  3510                           	callstack 25
  3511                           
  3512                           ;main.c: 120:     counter250ms += 1;
  3513                           
  3514                           ;incstack = 0
  3515  000C60  2A23               	incf	_counter250ms^0,f,c
  3516                           
  3517                           ;main.c: 121:     if (counter250ms == 8) {
  3518  000C62  0E08               	movlw	8
  3519  000C64  1823               	xorwf	_counter250ms^0,w,c
  3520  000C66  A4D8               	btfss	status,2,c
  3521  000C68  D005               	goto	i2l94
  3522                           
  3523                           ;main.c: 122:         counter250ms = 0;
  3524  000C6A  0E00               	movlw	0
  3525  000C6C  6E23               	movwf	_counter250ms^0,c
  3526                           
  3527                           ;main.c: 123:         will_down = 1;
  3528  000C6E  0E01               	movlw	1
  3529  000C70  0100               	movlb	0	; () banked
  3530  000C72  6FA2               	movwf	_will_down& (0+255),b
  3531  000C74                     i2l94:
  3532                           
  3533                           ;main.c: 125:     blink_counter = 0;
  3534  000C74  0E00               	movlw	0
  3535  000C76  6E1E               	movwf	(_blink_counter+1)^0,c
  3536  000C78  0E00               	movlw	0
  3537  000C7A  6E1D               	movwf	_blink_counter^0,c
  3538                           
  3539                           ;main.c: 126:     blink_on = !blink_on;
  3540  000C7C  0100               	movlb	0	; () banked
  3541  000C7E  51D8               	movf	_blink_on& (0+255),w,b
  3542  000C80  A4D8               	btfss	status,2,c
  3543  000C82  D002               	goto	i2u139_40
  3544  000C84  0E01               	movlw	1
  3545  000C86  D001               	goto	i2u140_40
  3546  000C88                     i2u139_40:
  3547  000C88  0E00               	movlw	0
  3548  000C8A                     i2u140_40:
  3549  000C8A  6FD8               	movwf	_blink_on& (0+255),b
  3550                           
  3551                           ; BSR set to: 0
  3552  000C8C  0012               	return		;funcret
  3553  000C8E                     __end_of_blink:
  3554                           	callstack 0
  3555  0000                     
  3556                           	psect	rparam
  3557  0000                     
  3558                           	psect	temp
  3559  000043                     btemp:
  3560                           	callstack 0
  3561  000043                     	ds	1
  3562  0000                     int$flags	set	btemp
  3563  0000                     wtemp8	set	btemp+1
  3564  0000                     ttemp5	set	btemp+1
  3565  0000                     ttemp6	set	btemp+4
  3566  0000                     ttemp7	set	btemp+8
  3567                           
  3568                           	psect	idloc
  3569                           
  3570                           ;Config register IDLOC0 @ 0x200000
  3571                           ;	unspecified, using default values
  3572  200000                     	org	2097152
  3573  200000  FF                 	db	255
  3574                           
  3575                           ;Config register IDLOC1 @ 0x200001
  3576                           ;	unspecified, using default values
  3577  200001                     	org	2097153
  3578  200001  FF                 	db	255
  3579                           
  3580                           ;Config register IDLOC2 @ 0x200002
  3581                           ;	unspecified, using default values
  3582  200002                     	org	2097154
  3583  200002  FF                 	db	255
  3584                           
  3585                           ;Config register IDLOC3 @ 0x200003
  3586                           ;	unspecified, using default values
  3587  200003                     	org	2097155
  3588  200003  FF                 	db	255
  3589                           
  3590                           ;Config register IDLOC4 @ 0x200004
  3591                           ;	unspecified, using default values
  3592  200004                     	org	2097156
  3593  200004  FF                 	db	255
  3594                           
  3595                           ;Config register IDLOC5 @ 0x200005
  3596                           ;	unspecified, using default values
  3597  200005                     	org	2097157
  3598  200005  FF                 	db	255
  3599                           
  3600                           ;Config register IDLOC6 @ 0x200006
  3601                           ;	unspecified, using default values
  3602  200006                     	org	2097158
  3603  200006  FF                 	db	255
  3604                           
  3605                           ;Config register IDLOC7 @ 0x200007
  3606                           ;	unspecified, using default values
  3607  200007                     	org	2097159
  3608  200007  FF                 	db	255
  3609                           
  3610                           	psect	config
  3611                           
  3612                           ; Padding undefined space
  3613  300000                     	org	3145728
  3614  300000  FF                 	db	255
  3615                           
  3616                           ;Config register CONFIG1H @ 0x300001
  3617                           ;	Oscillator Selection bits
  3618                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  3619                           ;	Fail-Safe Clock Monitor Enable bit
  3620                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3621                           ;	Internal/External Oscillator Switchover bit
  3622                           ;	IESO = OFF, Two-Speed Start-up disabled
  3623  300001                     	org	3145729
  3624  300001  06                 	db	6
  3625                           
  3626                           ;Config register CONFIG2L @ 0x300002
  3627                           ;	Power-up Timer Enable bit
  3628                           ;	PWRT = OFF, PWRT disabled
  3629                           ;	Brown-out Reset Enable bits
  3630                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3631                           ;	Brown-out Voltage bits
  3632                           ;	BORV = 0x3, unprogrammed default
  3633  300002                     	org	3145730
  3634  300002  19                 	db	25
  3635                           
  3636                           ;Config register CONFIG2H @ 0x300003
  3637                           ;	Watchdog Timer
  3638                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3639                           ;	Watchdog Timer Postscale Select bits
  3640                           ;	WDTPS = 0xF, unprogrammed default
  3641  300003                     	org	3145731
  3642  300003  1E                 	db	30
  3643                           
  3644                           ;Config register CONFIG3L @ 0x300004
  3645                           ;	unspecified, using default values
  3646                           ;	Processor Data Memory Mode Select bits
  3647                           ;	MODE = 0x3, unprogrammed default
  3648                           ;	Address Bus Width Select bits
  3649                           ;	ADDRBW = 0x3, unprogrammed default
  3650                           ;	Data Bus Width Select bit
  3651                           ;	DATABW = 0x1, unprogrammed default
  3652                           ;	External Bus Data Wait Enable bit
  3653                           ;	WAIT = 0x1, unprogrammed default
  3654  300004                     	org	3145732
  3655  300004  F3                 	db	243
  3656                           
  3657                           ;Config register CONFIG3H @ 0x300005
  3658                           ;	CCP2 MUX bit
  3659                           ;	CCP2MX = 0x1, unprogrammed default
  3660                           ;	ECCP MUX bit
  3661                           ;	ECCPMX = 0x1, unprogrammed default
  3662                           ;	Low-Power Timer1 Oscillator Enable bit
  3663                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3664                           ;	MCLR Pin Enable bit
  3665                           ;	MCLRE = ON, MCLR pin enabled; RG5 input pin disabled
  3666  300005                     	org	3145733
  3667  300005  83                 	db	131
  3668                           
  3669                           ;Config register CONFIG4L @ 0x300006
  3670                           ;	Stack Full/Underflow Reset Enable bit
  3671                           ;	STVREN = 0x1, unprogrammed default
  3672                           ;	Single-Supply ICSP Enable bit
  3673                           ;	LVP = OFF, Single-Supply ICSP disabled
  3674                           ;	Boot Block Size Select bits
  3675                           ;	BBSIZ = 0x0, unprogrammed default
  3676                           ;	Extended Instruction Set Enable bit
  3677                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3678                           ;	Background Debugger Enable bit
  3679                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  3680  300006                     	org	3145734
  3681  300006  81                 	db	129
  3682                           
  3683                           ; Padding undefined space
  3684  300007                     	org	3145735
  3685  300007  FF                 	db	255
  3686                           
  3687                           ;Config register CONFIG5L @ 0x300008
  3688                           ;	unspecified, using default values
  3689                           ;	Code Protection bit Block 0
  3690                           ;	CP0 = 0x1, unprogrammed default
  3691                           ;	Code Protection bit Block 1
  3692                           ;	CP1 = 0x1, unprogrammed default
  3693                           ;	Code Protection bit Block 2
  3694                           ;	CP2 = 0x1, unprogrammed default
  3695                           ;	Code Protection bit Block 3
  3696                           ;	CP3 = 0x1, unprogrammed default
  3697                           ;	Code Protection bit Block 4
  3698                           ;	CP4 = 0x1, unprogrammed default
  3699                           ;	Code Protection bit Block 5
  3700                           ;	CP5 = 0x1, unprogrammed default
  3701                           ;	Code Protection bit Block 6
  3702                           ;	CP6 = 0x1, unprogrammed default
  3703                           ;	Code Protection bit Block 7
  3704                           ;	CP7 = 0x1, unprogrammed default
  3705  300008                     	org	3145736
  3706  300008  FF                 	db	255
  3707                           
  3708                           ;Config register CONFIG5H @ 0x300009
  3709                           ;	unspecified, using default values
  3710                           ;	Boot Block Code Protection bit
  3711                           ;	CPB = 0x1, unprogrammed default
  3712                           ;	Data EEPROM Code Protection bit
  3713                           ;	CPD = 0x1, unprogrammed default
  3714  300009                     	org	3145737
  3715  300009  C0                 	db	192
  3716                           
  3717                           ;Config register CONFIG6L @ 0x30000A
  3718                           ;	unspecified, using default values
  3719                           ;	Write Protection bit Block 0
  3720                           ;	WRT0 = 0x1, unprogrammed default
  3721                           ;	Write Protection bit Block 1
  3722                           ;	WRT1 = 0x1, unprogrammed default
  3723                           ;	Write Protection bit Block 2
  3724                           ;	WRT2 = 0x1, unprogrammed default
  3725                           ;	Write Protection bit Block 3
  3726                           ;	WRT3 = 0x1, unprogrammed default
  3727                           ;	Write Protection bit Block 4
  3728                           ;	WRT4 = 0x1, unprogrammed default
  3729                           ;	Write Protection bit Block 5
  3730                           ;	WRT5 = 0x1, unprogrammed default
  3731                           ;	Write Protection bit Block 6
  3732                           ;	WRT6 = 0x1, unprogrammed default
  3733                           ;	Write Protection bit Block 7
  3734                           ;	WRT7 = 0x1, unprogrammed default
  3735  30000A                     	org	3145738
  3736  30000A  FF                 	db	255
  3737                           
  3738                           ;Config register CONFIG6H @ 0x30000B
  3739                           ;	unspecified, using default values
  3740                           ;	Configuration Register Write Protection bit
  3741                           ;	WRTC = 0x1, unprogrammed default
  3742                           ;	Boot Block Write Protection bit
  3743                           ;	WRTB = 0x1, unprogrammed default
  3744                           ;	Data EEPROM Write Protection bit
  3745                           ;	WRTD = 0x1, unprogrammed default
  3746  30000B                     	org	3145739
  3747  30000B  E0                 	db	224
  3748                           
  3749                           ;Config register CONFIG7L @ 0x30000C
  3750                           ;	unspecified, using default values
  3751                           ;	Table Read Protection bit Block 0
  3752                           ;	EBTR0 = 0x1, unprogrammed default
  3753                           ;	Table Read Protection bit Block 1
  3754                           ;	EBTR1 = 0x1, unprogrammed default
  3755                           ;	Table Read Protection bit Block 2
  3756                           ;	EBTR2 = 0x1, unprogrammed default
  3757                           ;	Table Read Protection bit Block 3
  3758                           ;	EBTR3 = 0x1, unprogrammed default
  3759                           ;	Table Read Protection bit Block 4
  3760                           ;	EBTR4 = 0x1, unprogrammed default
  3761                           ;	Table Read Protection bit Block 5
  3762                           ;	EBTR5 = 0x1, unprogrammed default
  3763                           ;	Table Read Protection bit Block 6
  3764                           ;	EBTR6 = 0x1, unprogrammed default
  3765                           ;	Table Read Protection bit Block 7
  3766                           ;	EBTR7 = 0x1, unprogrammed default
  3767  30000C                     	org	3145740
  3768  30000C  FF                 	db	255
  3769                           
  3770                           ;Config register CONFIG7H @ 0x30000D
  3771                           ;	unspecified, using default values
  3772                           ;	Boot Block Table Read Protection bit
  3773                           ;	EBTRB = 0x1, unprogrammed default
  3774  30000D                     	org	3145741
  3775  30000D  40                 	db	64
  3776                           tosu	equ	0xFFF
  3777                           tosh	equ	0xFFE
  3778                           tosl	equ	0xFFD
  3779                           stkptr	equ	0xFFC
  3780                           pclatu	equ	0xFFB
  3781                           pclath	equ	0xFFA
  3782                           pcl	equ	0xFF9
  3783                           tblptru	equ	0xFF8
  3784                           tblptrh	equ	0xFF7
  3785                           tblptrl	equ	0xFF6
  3786                           tablat	equ	0xFF5
  3787                           prodh	equ	0xFF4
  3788                           prodl	equ	0xFF3
  3789                           indf0	equ	0xFEF
  3790                           postinc0	equ	0xFEE
  3791                           postdec0	equ	0xFED
  3792                           preinc0	equ	0xFEC
  3793                           plusw0	equ	0xFEB
  3794                           fsr0h	equ	0xFEA
  3795                           fsr0l	equ	0xFE9
  3796                           wreg	equ	0xFE8
  3797                           indf1	equ	0xFE7
  3798                           postinc1	equ	0xFE6
  3799                           postdec1	equ	0xFE5
  3800                           preinc1	equ	0xFE4
  3801                           plusw1	equ	0xFE3
  3802                           fsr1h	equ	0xFE2
  3803                           fsr1l	equ	0xFE1
  3804                           bsr	equ	0xFE0
  3805                           indf2	equ	0xFDF
  3806                           postinc2	equ	0xFDE
  3807                           postdec2	equ	0xFDD
  3808                           preinc2	equ	0xFDC
  3809                           plusw2	equ	0xFDB
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         102
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      66
    BANK0           160     53     121
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_poll_g
    _draw->_setLed
    _move->_canMove

Critical Paths under _HandleInterrupt in COMRAM

    _HandleInterrupt->_submit
    _submit->_not_intersects

Critical Paths under _main in BANK0

    _main->_draw
    _poll_g->_move_down
    _poll_g->_move_left
    _poll_g->_move_right
    _poll_g->_move_up
    _move_up->_move
    _move_right->_move
    _move_left->_move
    _draw->_move_down
    _move_down->_move
    _move->_canMove

Critical Paths under _HandleInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HandleInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HandleInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HandleInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HandleInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HandleInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HandleInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HandleInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HandleInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HandleInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HandleInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HandleInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HandleInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HandleInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HandleInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HandleInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10113
                          _busy_wait
                               _draw
                               _init
                             _poll_g
 ---------------------------------------------------------------------------------
 (1) _poll_g                                               1     1      0    3994
                                             30 COMRAM     1     1      0
                          _move_down
                          _move_left
                         _move_right
                            _move_up
 ---------------------------------------------------------------------------------
 (2) _move_up                                              2     2      0     966
                                              9 BANK0      2     2      0
                               _move
 ---------------------------------------------------------------------------------
 (2) _move_right                                           2     2      0     966
                                              9 BANK0      2     2      0
                               _move
 ---------------------------------------------------------------------------------
 (2) _move_left                                            2     2      0     966
                                              9 BANK0      2     2      0
                               _move
 ---------------------------------------------------------------------------------
 (1) _init                                                 8     8      0     362
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _draw                                                42    42      0    5711
                                             11 BANK0     42    42      0
                          _move_down
                             _setLed
 ---------------------------------------------------------------------------------
 (2) _setLed                                               5     2      3    3487
                                             28 COMRAM     3     0      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _move_down                                            2     2      0     966
                                              9 BANK0      2     2      0
                               _move
 ---------------------------------------------------------------------------------
 (3) _move                                                 2     0      2     892
                                              7 BANK0      2     0      2
                            _canMove
 ---------------------------------------------------------------------------------
 (4) _canMove                                              9     7      2     470
                                             28 COMRAM     2     0      2
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _busy_wait                                            4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _HandleInterrupt                                      4     4      0    1156
                                             24 COMRAM     4     4      0
                              _blink
                             _rotate
                             _submit
 ---------------------------------------------------------------------------------
 (6) _submit                                               4     4      0    1156
                                             20 COMRAM     4     4      0
                            ___lwmod
                     _not_intersects
 ---------------------------------------------------------------------------------
 (7) _not_intersects                                      20    20      0     822
                                              0 COMRAM    20    20      0
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) _rotate                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _blink                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _busy_wait
   _draw
     _move_down
       _move
         _canMove
     _setLed
   _init
   _poll_g
     _move_down
       _move
         _canMove
     _move_left
       _move
         _canMove
     _move_right
       _move
         _canMove
     _move_up
       _move
         _canMove

 _HandleInterrupt (ROOT)
   _blink
   _rotate
   _submit
     ___lwmod
     _not_intersects

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     35      79       5       75.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1F      42       1       70.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BB      32        0.0%
DATA                 0      0      BB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sat Apr 20 18:17:34 2024

      _not_intersects$340 002A        _not_intersects$341 002B        _not_intersects$350 0034  
      _not_intersects$342 002C        _not_intersects$351 0035        _not_intersects$343 002D  
      _not_intersects$352 0036        _not_intersects$344 002E        _not_intersects$336 0026  
      _not_intersects$345 002F        _not_intersects$337 0027        _not_intersects$346 0030  
      _not_intersects$338 0028        _not_intersects$347 0031        _not_intersects$339 0029  
      _not_intersects$348 0032        _not_intersects$349 0033                       l231 02B2  
                     l232 0314                       l224 01AC                       l233 0366  
                     l226 01CE                       l261 0B5A                       l229 0250  
                     l263 0BAE                       l258 0B48                       wreg 000FE8  
                    l2403 0C04                      l2307 0B6C                      l2309 0B8E  
                    l2341 085A                      l2413 0958                      l2351 08BC  
                    l2335 081A                      l2353 08DA                      l2345 087C  
                    l2361 091A                      l2347 089A                      l2339 083C  
                    l2451 0022                      l2419 0960                      l2357 08FC  
                    l2439 0A2A                      l2553 03F2                      l2609 0D32  
                    l2549 03C8                      l2581 0A96                      l2575 0A88  
                    l2593 0AB2                      l2587 0AA4                      l2599 0AB6  
                    u2005 0094                      u2015 00A4                      u2025 00EE  
                    u2035 00F6                      u2045 0106                      _LATB 000F8A  
                    u2055 0150                      _LATC 000F8B                      _LATD 000F8C  
                    u2065 0158                      _LATE 000F8D                      _LATF 000F8E  
                    u2075 0168                      _LATG 000F8F                      u1804 0830  
                    u1805 082C                      u1910 0C28                      u1814 084C  
                    u1815 0848                      u1904 090C                      u1920 0986  
                    u1905 0908                      u1834 0870                      u1930 099A  
                    u1835 086C                      u1844 088C                      u1940 0A58  
                    u1845 0888                      u1864 08B0                      u1865 08AC  
                    u1874 08CC                      u1875 08C8                      u1965 002A  
                    u1894 08F0                      u1895 08EC                      u1975 0032  
                    u1985 0042                      u1995 008C                      i2l94 0C74  
                    _draw 0012                      _main 0D2A                      _grid 0060  
                    _init 0946                      _keys 0001                      _move 0D0E  
                    fsr1h 000FE2                      fsr2h 000FDA                      indf1 000FE7  
                    indf2 000FDF                      fsr1l 000FE1                      fsr2l 000FD9  
                    btemp 0043                      _type 0021     move_right@newPosition 00AC  
                    prodh 000FF4                      prodl 000FF3                      start 000E  
            ___param_bank 000000                     ?_draw 0024                     ?_main 0024  
                   ?_init 0024                     ?_move 00AA                     _T0CON 000FD5  
         __end_of___lwmod 0BF4                     i2l109 0B32                     i2l809 0BEA  
         __end_of_canMove 0BB2                     _TMR0H 000FD7                     _TMR0L 000FD6  
                   _PORTB 000F81                     _PORTC 000F82                     _PORTD 000F83  
                   _PORTE 000F84                     _PORTF 000F85                     _PORTG 000F86  
                   _PORTH 000F87                     _PORTJ 000F88                     _TRISB 000F93  
                   _TRISC 000F94                     _TRISD 000F95                     _TRISE 000F96  
                   _TRISF 000F97                     _TRISG 000F98                     _TRISH 000F99  
                   _TRISJ 000F9A                     _blink 0C60      move_down@newPosition 00AC  
                   init@i 00A5                     init@j 00A7           __end_of_move_up 0CAE  
                   tablat 000FF5                     ttemp5 0044                     ttemp6 0047  
                   ttemp7 004B                     status 000FD8                     wtemp8 0044  
         __initialization 0C2C              __end_of_draw 0416              __end_of_main 0D3C  
            __end_of_init 0A5A              __end_of_move 0D2A         ??_HandleInterrupt 003C  
                  ??_draw 00AE                    ??_main 0043                    ??_init 0040  
                  ??_move 0042             __activetblptr 000003                    ?_blink 0024  
                  i2l2061 0B04                    i2l2071 0B16                    i2l1601 045A  
                  i2l1621 04D2                    i2l1613 04A6                    i2l2077 0B22  
                  i2l1703 068A                    i2l1607 0480                    i2l1641 0540  
                  i2l1633 0514                    i2l1627 04EE                    i2l1619 04CC  
                  i2l1707 06B4                    i2l1811 06FA                    i2l1661 05AE  
                  i2l1653 0582                    i2l1709 06D6                    i2l1813 0734  
                  i2l1647 055C                    i2l1639 053A                    i2l1823 079A  
                  i2l1681 061C                    i2l1673 05F0                    i2l1593 0438  
                  i2l1817 0762                    i2l1809 06F0                    i2l1667 05CA  
                  i2l1659 05A8                    i2l1595 043E                    i2l1587 041C  
                  i2l1819 076C                    i2l1827 07C4                    i2l1693 065E  
                  i2l1829 07E6                    i2l1687 0638                    i2l1679 0616  
                  i2l1795 0BE0                    i2l1787 0BC0                    i2l1699 0684  
                  i2l1789 0BC8                    _INTCON 000FF2                 ??___lwmod 0028  
               ??_canMove 00A3                    clear_0 0C44                    clear_1 0C50  
                  _setLed 0818                    _poll_g 0A5A                    _rotate 0D3C  
                  _submit 06E4                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                 ??_move_up 0042                __accesstop 0060  
 __end_of__initialization 0C56             ___rparam_used 000001            __pcstackCOMRAM 0024  
            __pidataBANK0 0D44             __end_of_blink 0C8E                   ??_blink 0024  
 __size_of_not_intersects 02CE                __pbssBANK0 0060            move_left@F4749 0015  
             setLed@value 0042            move_down@F4758 000F        __size_of_busy_wait 0038  
                 ?_setLed 0040        __size_of_move_left 0020                   ?_poll_g 0024  
      __size_of_move_down 0020        move_up@newPosition 00AC                   ?_rotate 0024  
                 ?_submit 0024                canMove@bot 00A8                canMove@top 00A7  
         canMove@position 0040           _HandleInterrupt 0008                   __Hparam 0000  
                 __Lparam 0000                   ___lwmod 0BB2                   _canMove 0B46  
                 __pcinit 0C2C                   __ramtop 1000           __size_of_setLed 012E  
            canMove@right 00A6                   __ptext0 0D2A                   __ptext1 0A5A  
                 __ptext2 0C8E                   __ptext3 0CAE                   __ptext4 0CCE  
                 __ptext5 0946                   __ptext6 0012                   __ptext7 0818  
                 __ptext8 0CEE                   __ptext9 0D0E           __size_of_poll_g 007A  
         __size_of_rotate 0008           __size_of_submit 0134         __end_of_busy_wait 0C2C  
                 _move_up 0C8E            __pintcode_body 0AD4      end_of_initialization 0C56  
       __end_of_move_left 0CEE         __end_of_move_down 0D0E                   int_func 0AD4  
                 poll_g@i 0042                _move_right 0CAE                   postinc0 000FEE  
               _PORTBbits 000F81                 _PORTGbits 000F86  not_intersects@intersects 0037  
          _not_intersects 0416   __end_of_HandleInterrupt 0B46            __end_of_setLed 0946  
          __end_of_poll_g 0AD4            __end_of_rotate 0D44            __end_of_submit 0818  
  __end_of_not_intersects 06E4               _canMove$479 00A9              _counter250ms 0023  
     start_initialization 0C2C               submit@F4721 0017            _PORTG_previous 000B  
             ?_move_right 0024                busy_wait@i 00A3               __pdataBANK0 00D8  
                ??_setLed 00A3                  ??_poll_g 0042                  ??_rotate 0024  
                ??_submit 0038           ?_not_intersects 0024               __pbssCOMRAM 0001  
           __pcstackBANK0 00A3          ?_HandleInterrupt 0024                 __pintcode 0008  
                ?___lwmod 0024                  ?_canMove 0040                  ?_move_up 0024  
     __size_of_move_right 0020            __size_of_blink 002E                 _busy_wait 0BF4  
             canMove@left 00A5           move@newPosition 00AA                 draw@F4653 00A0  
               draw@F4661 0098                 draw@F4655 009E                 draw@F4663 0096  
               draw@F4671 008E                 draw@F4657 009C                 draw@F4665 0094  
               draw@F4673 008C                 draw@F4681 0084                 draw@F4659 009A  
               draw@F4667 0092                 draw@F4675 008A                 draw@F4683 0082  
               draw@F4669 0090                 draw@F4677 0088                 draw@F4685 0080  
               draw@F4679 0086                  i2u121_40 06E0                  i2u140_40 0C8A  
                i2u136_40 0BCC                  i2u139_40 0C88                 _move_left 0CCE  
               _move_down 0CEE             _blink_counter 001D                 _will_down 00A2  
               init@F4607 0019                ?_busy_wait 0024                 init@i_333 00A9  
           _PORTG_current 0007                submit@4722 003A                  __Hrparam 0000  
              ?_move_left 0024                ?_move_down 0024                  __Lrparam 0000  
         move_right@F4752 0013          __size_of___lwmod 0042          __size_of_canMove 006C  
            move_up@F4755 0011                 setLed@pos 0040                  _blink_on 00D8  
                __ptext10 0B46                  __ptext11 0BF4                  __ptext13 06E4  
                __ptext14 0416                  __ptext15 0BB2                  __ptext16 0D3C  
                __ptext17 0C60          __size_of_move_up 0020      move_left@newPosition 00AC  
           __size_of_draw 0404             __size_of_main 0012             __size_of_init 0114  
           __size_of_move 001C                  draw@4660 00BC                  draw@4670 00C6  
                draw@4662 00BE                  draw@4654 00B6                  draw@4680 00D0  
                draw@4672 00C8                  draw@4664 00C0                  draw@4656 00B8  
                draw@4682 00D2                  draw@4674 00CA                  draw@4666 00C2  
                draw@4658 00BA                  draw@4684 00D4                  draw@4676 00CC  
                draw@4668 00C4                  draw@4686 00D6                  draw@4678 00CE  
            ??_move_right 0042                  int$flags 0043                  _position 001B  
                _rotation 0022          ??_not_intersects 0024                  init@4608 00A3  
              _INTCONbits 000FF2               ??_busy_wait 0040        __end_of_move_right 0CCE  
                intlevel2 0000          ___lwmod@dividend 0024               ??_move_left 0042  
             ??_move_down 0042           ___lwmod@divisor 0026           ___lwmod@counter 0028  
             _prev_rotate 001F               _prev_submit 0020  __size_of_HandleInterrupt 0B3E  
